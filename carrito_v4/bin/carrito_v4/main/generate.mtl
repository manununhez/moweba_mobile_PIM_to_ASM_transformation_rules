[comment encoding = UTF-8 /]
[module generate('http://www.eclipse.org/uml2/5.0.0/UML')]

[import carrito_v4::main::android::config::generateConfigFiles/]
[import carrito_v4::main::android::config::generateBuildGradle/]

[import carrito_v4::main::android::beans::beansGenAndroid/]

[import carrito_v4::main::android::rest::generateRestInterface/]
[import carrito_v4::main::android::rest::generateRestClient/]


[import carrito_v4::main::android::bd::createAndroidDatabase/]
[import carrito_v4::main::android::bd::tables::generateDbTables/]
[import carrito_v4::main::android::bd::dao::generateDaoAndroid/]

[import carrito_v4::main::android::files::createFileHelper/]

[import carrito_v4::main::android::keyvalue::createSharedHelper/]

[import carrito_v4::main::android::adapter::generateBDAdapters/]
[import carrito_v4::main::android::adapter::generateKVAdapters/]

[import carrito_v4::main::android::activities::generateMainActivity/]
[import carrito_v4::main::android::activities::generateBDActivities/]
[import carrito_v4::main::android::activities::generateFileActivities/]
[import carrito_v4::main::android::activities::generateKVActivities/]
[import carrito_v4::main::android::activities::generateRestActivities/]
[import carrito_v4::main::android::activities::generateBDFormActivities/]
[import carrito_v4::main::android::activities::generateKVFormActivities/]
[import carrito_v4::main::android::activities::generateSensorActivities/]

[import carrito_v4::main::windows::pages::generateMainPage/]
[import carrito_v4::main::windows::pages::generateBDPages/]
[import carrito_v4::main::windows::pages::generateBDCreateFormPage/]
[import carrito_v4::main::windows::pages::generateBDDeleteUpdateFormPage/]
[import carrito_v4::main::windows::pages::generateFilePages/]
[import carrito_v4::main::windows::pages::generateKVPages/]
[import carrito_v4::main::windows::pages::generateKVDeleteUpdateFormPage/]
[import carrito_v4::main::windows::pages::generateRestPages/]
[import carrito_v4::main::windows::pages::generateSensorsPages/]

[import carrito_v4::main::windows::beans::beansGenWindows/]

[import carrito_v4::main::windows::generateAppPage/]

[import carrito_v4::main::windows::bd::createWindowsDatabaseHelper/]
[import carrito_v4::main::windows::bd::dao::generateDaoWindows/]

[import carrito_v4::main::windows::files::createFileHelperWindows/]

[import carrito_v4::main::windows::keyvalue::createSharedHelperWindows/]

[import carrito_v4::main::windows::rest::generateRestWindowsInterface/]

[import services::uml2services/]
[import common::utils_gen/]


[template public generateElement(model: Model)]
[comment @main/]
[let aPackages: Sequence(Package) = model.eAllContents(Package) ]

[generateGeneralAndroidClasses(model)/]
[generateGeneralWindowsClasses(model)/]

[for (aPackage : Package | aPackages)]
[let aClasses: Set(Class) = aPackage.ownedElement->filter(Class) ]
[let p : Package = aPackage.ancestors(Package)->first()]		
[comment]Recorremos los paquetes existentes en el modelo. Solo nos interesa dos paquetes:
 DataPersistence y DataProvider[/comment]

	[comment]Si existe el paquete DataPersistence[/comment]
	[if (aPackage.hasStereotype('DataPersistence'))]
	    [comment]Solo creamos este archivo Si existe por lo menos una entidad tipo Database[/comment]
		[if (aPackage.isPackageHasThisPropertyStereotype('persistentEntity', 'persistentType', 'Database'))]
			[generateDBForAndroid(aPackage, p.name.toLower())/]
			[generateDBForWindows(aPackage, p.name.toUpperFirst())/]
		[/if]
	
		[comment]Solo creamos este archivo Si existe por lo menos una entidad tipo File[/comment]
		[if (aPackage.isPackageHasThisPropertyStereotype('persistentEntity', 'persistentType', 'File'))]
			[generateFilesForAndroid(aPackage, p.name.toLower())/]
			[generateFilesForWindows(aPackage, p.name.toUpperFirst())/]
		[/if]
	
		[comment]Solo creamos este archivo Si existe por lo menos una entidad tipo KeyValue[/comment]
		[if (aPackage.isPackageHasThisPropertyStereotype('persistentEntity', 'persistentType', 'KeyValue'))]
			[generateKVForAndroid(aPackage, p.name.toLower())/]
			[generateKVForWindows(aPackage, p.name.toUpperFirst())/]
		[/if]
	[/if]
	
	[comment]Si existe el paquete DataProvider[/comment]
	[if (aPackage.hasStereotype('DataProvider'))]
		[for (aClass : Class | aClasses)]
			[comment]Si la clase tiene el paquete WebServiceInterface[/comment]
			[if (aClass.hasStereotype('WebServiceInterface'))]
				[generateRestAndroid(aClass, p.name.toLower())/]
				[generateRestWindows(aClass, p.name.toUpperFirst())/]
			[/if]
			
			[comment]Si la clase tiene el paquete HardwareDeviceInterface[/comment]
			[if (aClass.hasStereotype('HardwareDeviceInterface'))]
				[generateSensorsAndroid(aClass, p.name.toLower())/]
				[generateSensorsWindows(aClass, p.name.toUpperFirst())/]
			[/if]
		[/for]
	[/if]
[/let]
[/let]
[/for]
[/let]
[/template]

[comment]*****************************************
	Generamos las clases principales de Android. 
	Se generan:
	- El MainActivity y su layout XML, el cual constituye 
		la pantalla principal de la aplicacion.
	- El archivo de configuracion: AndroidManifest.xml, 
		donde se definen las pantallas que contiene el app, 
   		y los permisos a utilizar
	- El build.gradle, encargado de manejar e importar las 
		librerias de la aplicacion
*****************************************[/comment]
[template public generateGeneralAndroidClasses(model : Model)]
	[generateMainActivity(model)/]
	[generateMainActivityLayout(model)/]
	[generateConfigFiles(model)/]
	[generateBuildGradle(model)/]
[/template]


[comment]*****************************************
Generamos las clases principales de WindowsPhone:
- El App.xaml.cs, constituye el archivo de entrada de la aplicacion.
- El MainPage y su interfaz, constituye la pantalla
	principal de la aplicacion. 
*****************************************[/comment]
[template public generateGeneralWindowsClasses(model : Model)]
	[generateAppPage(model)/]
	[generateMainPage(model)/]
	[generateMainPageLayout(model)/]
[/template]


[comment]*****************************************
Generamos los archivos necesarios para la configuracion de SQLite en Android:
el helper, las tablas, los modelos y los DAO.
A parte, se generan las pantallas para poder probar las funciones CRUD
por cada tabla. Por cada tabla se generan dos pantallas:
- Una pantalla donde se listan todos los datos de la tabla
- Una pantalla para Agregar nuevos datos, actualizar o eliminar.
*****************************************[/comment]
[template public generateDBForAndroid(aPackage : Package, namespace : String)]
[let aClasses: Set(Class) = aPackage.ownedElement->filter(Class) ]

[comment]Generamos el helper para base de datos: MySqliteHelper.java[/comment]
[createDatabaseAndroid(aPackage, namespace)/]

[comment]Genera los beans o modelos de la aplicacion[/comment]
[beansGenAndroid(aPackage, namespace)/]

	[for (aClass : Class | aClasses)]
		[comment]Verificamos que la clase tenga el estereotipo 'persistentEntity'[/comment]
		[if (aClass.hasStereotype('persistentEntity'))]
		[comment]Verificamos que el valor etiquetado 'persistentType' sea para base de datos[/comment]
			[if (aClass.getValueOfStereotypePropertyEnumLit('Mobile Profile::persistentEntity', 'persistentType') = 'Database')]
				
				[comment]Generamos la pantalla para listar los datos de cada entidad[/comment]
				[generateBDActivities(aClass, namespace)/]
				[generateaBDActivitiesLayout(aClass)/]
			
				[comment]Generamos las pantallas para Agregar, Editar y Eliminar datos[/comment]
				[generateBDFormActivities(aClass, namespace)/]
				[generateBDFormActivitiesLayout(aClass)/]
			
				[comment]Generamos los adaptadores para cargar los distintos campos de cada fila de la tabla [/comment]
				[generateBDAdapters(aClass, namespace)/]
				[generateBDAdapterLayout(aClass)/]
			
				[comment]Generamos las tablas por cada 'persistentEntity', con los campos con estereotipo 'persistentEntityProperty'[/comment]
				[generateDbTables(aClass, namespace)/]
			
				[comment]Generamos las funciones CRUD para cada tabla[/comment]
				[generateDaoAndroid(aClass, namespace)/]
			[/if]
		[/if]
	[/for]
[/let]
[/template]

[comment]*****************************************

*****************************************[/comment]
[template public generateDBForWindows(aPackage : Package, namespace : String)]
[let aClasses: Set(Class) = aPackage.ownedElement->filter(Class) ]

[comment]Generamos el helper para base de datos: SQLiteHelper.cs[/comment]
[createWindowsDatabaseHelper(aPackage, namespace)/]

[comment]Genera los beans o modelos de la aplicacion[/comment]
[beansGenWindows(aPackage)/]

[for (aClass : Class | aClasses)]
	[comment]Verificamos que la clase tenga el estereotipo 'persistentEntity'[/comment]
	[if (aClass.hasStereotype('persistentEntity'))]
		[comment]Verificamos que el valor etiquetado 'persistentType' sea para base de datos[/comment]
		[if (aClass.getValueOfStereotypePropertyEnumLit('Mobile Profile::persistentEntity', 'persistentType') = 'Database')]
			
			[comment]Generamos la pantalla para listar los datos de cada entidad[/comment]
			[generateBDPages(aClass, namespace)/]
			[generateBDPagesLayout(aClass, namespace)/]
		
			[generateBDCreateFormPage(aClass, namespace)/]
			[generateBDCreateFormPageLayout(aClass, namespace)/]
			
			[generateBDDeleteUpdateFormPage(aClass, namespace)/]
			[generateBDDeleteUpdateFormPageLayout(aClass, namespace)/]
			
			[comment]Generamos las funciones CRUD para cada tabla[/comment]
			[generateDaoWindows(aClass, namespace)/]
		[/if]
	[/if]
[/for]
[/let]
[/template]


[comment]*****************************************

*****************************************[/comment]
[template public generateFilesForAndroid(aPackage : Package, namespace : String)]
[let aClasses: Set(Class) = aPackage.ownedElement->filter(Class) ]

[comment]Generamos el helper para manejar files: FilesHelper.java[/comment]
[createFileHelper(aPackage, namespace)/]

	[for (aClass : Class | aClasses)]
		[comment]Verificamos que la clase tenga el estereotipo 'persistentEntity'[/comment]
		[if (aClass.hasStereotype('persistentEntity'))]
			[comment]Verificamos que el valor etiquetado 'persistentType' sea para archivos[/comment]
			[if (aClass.getValueOfStereotypePropertyEnumLit('Mobile Profile::persistentEntity', 'persistentType') = 'File')]
				[generateFileActivities(aClass, namespace)/]
				[generateFileActivitiesLayout(aClass)/]
			[/if]
		[/if]
	[/for]
[/let]
[/template]

[comment]*****************************************

*****************************************[/comment]
[template public generateFilesForWindows(aPackage : Package, namespace : String)]
[let aClasses: Set(Class) = aPackage.ownedElement->filter(Class) ]

[comment]Generamos el helper para manejar files: FilesHelper.cs[/comment]
[createFileHelperWindows(aPackage, namespace)/]
	
	[for (aClass : Class | aClasses)]
		[comment]Verificamos que la clase tenga el estereotipo 'persistentEntity'[/comment]
		[if (aClass.hasStereotype('persistentEntity'))]
			[comment]Verificamos que el valor etiquetado 'persistentType' sea para archivos[/comment]
			[if (aClass.getValueOfStereotypePropertyEnumLit('Mobile Profile::persistentEntity', 'persistentType') = 'File')]
				[generateFilePages(aClass, namespace)/]
				[generateFilePagesLayout(aClass, namespace)/]
			[/if]
		[/if]
	[/for]
[/let]
[/template]

[comment]*****************************************

*****************************************[/comment]
[template public generateKVForAndroid(aPackage : Package, namespace : String)]
[let aClasses: Set(Class) = aPackage.ownedElement->filter(Class) ]

[comment]Generamos el helper para manejar los pares clave-valor: StorageManager.java[/comment]
[createSharedHelper(aPackage, namespace)/]

	[for (aClass : Class | aClasses)]
		[comment]Verificamos que la clase tenga el estereotipo 'persistentEntity'[/comment]
		[if (aClass.hasStereotype('persistentEntity'))]
			[comment]Verificamos que el valor etiquetado 'persistentType' sea para pares clave-valor[/comment]
			[if (aClass.getValueOfStereotypePropertyEnumLit('Mobile Profile::persistentEntity', 'persistentType') = 'KeyValue')]

				[generateKVActivities(aClass, namespace)/]
				[generateKVActivitiesLayout(aClass)/]
		
				[generateKVFormActivities(aClass, namespace)/]
				[generateKVFormActivitiesLayout(aClass)/]
			
				[generateKVAdapters(aClass, namespace)/]
				[generateKVAdapterLayout(aClass)/]
			[/if]
		[/if]
	[/for]
[/let]
[/template]

[comment]*****************************************

*****************************************[/comment]
[template public generateKVForWindows(aPackage : Package, namespace : String)]
[let aClasses: Set(Class) = aPackage.ownedElement->filter(Class) ]

[comment]Generamos el helper para manejar los pares clave-valor: StorageManager.cs[/comment]
[createSharedHelperWindows(aPackage)/]

	[for (aClass : Class | aClasses)]
		[comment]Verificamos que la clase tenga el estereotipo 'persistentEntity'[/comment]
		[if (aClass.hasStereotype('persistentEntity'))]
			[comment]Verificamos que el valor etiquetado 'persistentType' sea para pares clave-valor[/comment]
			[if (aClass.getValueOfStereotypePropertyEnumLit('Mobile Profile::persistentEntity', 'persistentType') = 'KeyValue')]
				[generateKVPages(aClass, namespace)/]
				[generateKVPagesLayout(aClass, namespace)/]
		
				[generateKVDeleteUpdateFormPage(aClass, namespace)/]
				[generateKVDeleteUpdateFormPageLayout(aClass, namespace)/]
			[/if]
		[/if]
	[/for]
[/let]
[/template]

[comment]*****************************************

*****************************************[/comment]
[template public generateRestAndroid(aClass : Class, namespace : String)]
	[comment]Verificamos que la clase tenga el estereotipo 'WebServiceInterface'[/comment]
	[if (aClass.hasStereotype('WebServiceInterface'))]
		[comment]Generamos el ApiInterface.java[/comment]
		[generateRestInterface(aClass, namespace)/]
		
		[comment]Generamos el ApiClient.java[/comment]
		[generateRestClient(aClass, namespace)/]
		
		[generateRestActivities(aClass, namespace)/]
		[generateRestActivitiesLayout(aClass)/]
	[/if]
[/template]

[comment]*****************************************

*****************************************[/comment]
[template public generateRestWindows(aClass : Class, namespace : String)]
	[comment]Verificamos que la clase tenga el estereotipo 'WebServiceInterface'[/comment]
	[if (aClass.hasStereotype('WebServiceInterface'))]
		[comment]Generamos el ApiInterface.cs[/comment]
		[generateRestWindowsInterface(aClass, namespace)/]
		
		[generateRestPages(aClass, namespace)/]
		[generateRestPagesLayout(aClass, namespace)/]
	[/if]
[/template]

[comment]*****************************************

*****************************************[/comment]
[template public generateSensorsAndroid(aClass : Class, namespace : String)]
	[comment]Sensors Utils. Generamos los utils para los sensores: camra y microfono[/comment]
	[generateGPSClass(aClass, namespace)/]
	[generateAudioActivity(aClass, namespace)/]
	[generateAudioActivityLayout(aClass)/]
	[generateCameraActivity(aClass, namespace)/]
	[generateCameraActivityLayout(aClass)/]

	[comment]Verificamos que la clase tenga el estereotipo 'HardwareDeviceInterface'[/comment]
	[if (aClass.hasStereotype('HardwareDeviceInterface'))]
		[generateSensorActivities(aClass, namespace)/]
		[generateSensorActivitiesLayout(aClass)/]
	[/if]
[/template]

[comment]*****************************************

*****************************************[/comment]
[template public generateSensorsWindows(aClass : Class, namespace : String)]
	[comment]Sensors Utils. Generamos los utils para los sensores: camra y microfono[/comment]
	[generateCameraPages(aClass, namespace)/]
	[generateCameraPagesLayout(aClass, namespace)/]
	[generateAudioRecordPages(aClass, namespace)/]
	[generateAudioRecordPagesLayout(aClass, namespace)/]

	[comment]Verificamos que la clase tenga el estereotipo 'HardwareDeviceInterface'[/comment]
	[if (aClass.hasStereotype('HardwareDeviceInterface'))]
		[generateSensorsPages(aClass, namespace)/]
		[generateSensorsPagesLayout(aClass, namespace)/]
	[/if]
[/template]





