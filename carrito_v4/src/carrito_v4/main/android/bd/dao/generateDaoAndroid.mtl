[comment encoding = UTF-8 /]
[module generateDaoAndroid('http://www.eclipse.org/uml2/5.0.0/UML')]

[import services::uml2services/]
[import common::utils_gen/]


[template public generateDaoAndroid(aClass : Class)]
[if (aClass.hasStereotype('persistentEntity'))]
[if (aClass.getValueOfStereotypePropertyEnumLit('Mobile Profile::persistentEntity', 'persistentType') = 'Database')]
[let persistentEntityProperties : Set(Property) = (aClass.getAllAttributes()->select(getAppliedStereotypes()->exists(s: Stereotype |s.name='persistentEntityProperty'))) ]			

[file (aClass.classFileName('android/bd/dao/', aClass, 'DAO','.java'), false)]
//[protected ('imports')]
import android.content.ContentValues;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;

import java.util.ArrayList;
import java.util.List;
//[/protected]
	
public class [aClass.name.toUpperFirst()/]DAO {

	private MySQLiteHelper mySQLiteHelper;

		public [aClass.name.toUpperFirst()/]DAO(MySQLiteHelper mySQLiteHelper) {
			this.mySQLiteHelper = mySQLiteHelper;
		}

		// Adding new [aClass.name.toUpperFirst()/]
		public void add[aClass.name.toUpperFirst()/]([aClass.name.toUpperFirst()/] [aClass.name.toLowerFirst()/]) {
			SQLiteDatabase db = mySQLiteHelper.getWritableDatabase();

			ContentValues values = new ContentValues();
			[for (p : Property | persistentEntityProperties)]				
			values.put([aClass.name.toUpperFirst()/]Table.COLUMN_[p.name.toUpper()/], [aClass.name.toLowerFirst()/].get[p.name.toUpperFirst()/]().toString());		
			[/for]
			
			// Inserting Row
			db.insert([aClass.name.toUpperFirst()/]Table.TABLE_NAME, null, values);
			db.close(); // Closing database connection
		}

		// Getting single [aClass.name.toUpperFirst()/]    
		public [aClass.name.toUpperFirst()/] get[aClass.name.toUpperFirst()/](int id) {   
			SQLiteDatabase db = mySQLiteHelper.getReadableDatabase();

			[aClass.name.toUpperFirst()/] [aClass.name.toLowerFirst()/] = new [aClass.name.toUpperFirst()/]();

			Cursor cursor = db.query([aClass.name.toUpperFirst()/]Table.TABLE_NAME, new String['['/][']'/] {
					[for (p : Property | persistentEntityProperties) separator (', ')][aClass.name.toUpperFirst()/]Table.COLUMN_[p.name.toUpper()/][/for]
					},[for (p : Property | persistentEntityProperties)]	[if (p.getValueOfStereotypePropertyBoolean('Mobile Profile::persistentEntityProperty', 'selectable'))][aClass.name.toUpperFirst()/]Table.COLUMN_[p.name.toUpper()/] + "=?",	[/if][/for]
					new String['['/][']'/] { String.valueOf(id) }, null, null, null, null);
			
			if (cursor != null) {
				cursor.moveToFirst();
				
				[aClass.name.toLowerFirst()/] = new [aClass.name.toUpperFirst()/](
						[comment]implicit for loop (start in 1, we want to start in 0)[/comment]
						[for (p : Property | persistentEntityProperties) separator (', ')][p.getJavaConstructorDescription('Mobile Profile::persistentEntityProperty', 'cursor.getString('+(i - 1)+')')/][/for]				
				); 

				cursor.close();
			}

			return [aClass.name.toLowerFirst()/];
		}


			// Getting All [aClass.name.toUpperFirst()/]
			public List<[aClass.name.toUpperFirst()/]> getAll[aClass.name.toUpperFirst()/]() {
				SQLiteDatabase db = mySQLiteHelper.getReadableDatabase();

				List<[aClass.name.toUpperFirst()/]> [aClass.name.toLowerFirst()/]List = new ArrayList<[aClass.name.toUpperFirst()/]>();
				// Select All Query
				String selectQuery = "SELECT  * FROM " + [aClass.name.toUpperFirst()/]Table.TABLE_NAME;

				Cursor cursor = db.rawQuery(selectQuery, null);

				// looping through all rows and adding to list
				if (cursor.moveToFirst()) {
					do {
						[aClass.name.toUpperFirst()/] [aClass.name.toLowerFirst()/] = new [aClass.name.toUpperFirst()/](
						[comment]implicit for loop (start in 1, we want to start in 0)[/comment]						
						[for (p : Property | persistentEntityProperties)separator (', ')][p.getJavaConstructorDescription('Mobile Profile::persistentEntityProperty', 'cursor.getString('+i+')')/][/for]
						); 
						
						// Adding [aClass.name.toLowerFirst()/] to list
						 [aClass.name.toLowerFirst()/]List.add( [aClass.name.toLowerFirst()/]);
					} while (cursor.moveToNext());
				}

				cursor.close();

				//return [aClass.name.toLowerFirst()/] list
				return [aClass.name.toLowerFirst()/]List;
			}



			// Getting [aClass.name.toLowerFirst()/] Count
			public int get[aClass.name.toUpperFirst()/]Count() {
				SQLiteDatabase db = mySQLiteHelper.getReadableDatabase();

				String countQuery = "SELECT  * FROM " + [aClass.name.toUpperFirst()/]Table.TABLE_NAME;
				Cursor cursor = db.rawQuery(countQuery, null);

				int count = cursor.getCount();

				cursor.close();

				// return count
				return count;
			}


			// Updating single [aClass.name.toLowerFirst()/]
			public int update[aClass.name.toUpperFirst()/]([aClass.name.toUpperFirst()/] [aClass.name.toLowerFirst()/]) {
				SQLiteDatabase db = mySQLiteHelper.getWritableDatabase();

				ContentValues values = new ContentValues();
				[for (p : Property | persistentEntityProperties)]				
				values.put([aClass.name.toUpperFirst()/]Table.COLUMN_[p.name.toUpper()/], [aClass.name.toLowerFirst()/].get[p.name.toUpperFirst()/]().toString());		
				[/for]

				// updating row
				return db.update([aClass.name.toUpperFirst()/]Table.TABLE_NAME, values,
						[for (p : Property | persistentEntityProperties)]				
						[if (p.getValueOfStereotypePropertyBoolean('Mobile Profile::persistentEntityProperty', 'selectable'))]
							[aClass.name.toUpperFirst()/]Table.COLUMN_[p.name.toUpper()/] + "=?",
							new String['['/][']'/] { String.valueOf([aClass.name.toLowerFirst()/].get[p.name.toUpperFirst()/]()) });		
						[/if]
						[/for] 
						

			}

			// Deleting single [aClass.name.toLowerFirst()/]
			public void delete[aClass.name.toUpperFirst()/]([aClass.name.toUpperFirst()/] [aClass.name.toLowerFirst()/]) {
				SQLiteDatabase db = mySQLiteHelper.getWritableDatabase();

				db.delete([aClass.name.toUpperFirst()/]Table.TABLE_NAME,
						[for (p : Property | persistentEntityProperties)]
						[if (p.getValueOfStereotypePropertyBoolean('Mobile Profile::persistentEntityProperty', 'selectable'))]
						[aClass.name.toUpperFirst()/]Table.COLUMN_[p.name.toUpper()/] + "=?",
						new String['['/][']'/] { String.valueOf([aClass.name.toLowerFirst()/].get[p.name.toUpperFirst()/]()) });		
						[/if]
						[/for] 

				db.close();
			}

			// Deleting all [aClass.name.toLowerFirst()/]
			public void deleteAll[aClass.name.toUpperFirst()/]() {
				SQLiteDatabase db = mySQLiteHelper.getWritableDatabase();

				db.delete([aClass.name.toUpperFirst()/]Table.TABLE_NAME, null, null);
				db.close();
			}

}
[/file]
[/let]
[/if]
[/if]
[/template]
