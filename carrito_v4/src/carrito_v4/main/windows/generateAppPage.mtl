[comment encoding = UTF-8 /]
[module generateAppPage('http://www.eclipse.org/uml2/5.0.0/UML')]

[import services::uml2services/]
[import common::utils_gen/]

[template public generateAppPage(model : Model)]
[let aPackages: Sequence(Package) = model.eAllContents(Package) ]
[let p : Package = aPackages->first()]
[file ('windows/App.xaml.cs', false)]
//[protected ('imports')]
using [p.name.toUpperFirst()/].Common;
using [p.name.toUpperFirst()/].Views;
using System;
using Windows.ApplicationModel;
using Windows.ApplicationModel.Activation;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;
using Windows.UI.Xaml.Media.Animation;
using Windows.UI.Xaml.Navigation;
//[/protected]

namespace [p.name.toUpperFirst()/]
{

    public sealed partial class App : Application
    {
        private TransitionCollection transitions;

        public App()
        {
            this.InitializeComponent();
            this.Suspending += this.OnSuspending;
		[for (aPackage : Package | aPackages)]
		[if (aPackage.hasStereotype('DataPersistence'))]
			[if (aPackage.isPackageHasThisPropertyStereotype('persistentEntity', 'persistentType', 'Database'))]
			//Creating and initializing the DB
			SQLiteHelper.Createdatabase();
			[comment]CREAMOS EL ARCHIVO HELPER DE SQLITE[/comment]
			[/if]
		[/if]
		[/for]	    
        }


        protected override void OnLaunched(LaunchActivatedEventArgs e)
        {
#if DEBUG
            if (System.Diagnostics.Debugger.IsAttached)
            {
                this.DebugSettings.EnableFrameRateCounter = true;
            }
#endif

            Frame rootFrame = Window.Current.Content as Frame;

            // Do not repeat app initialization when the Window already has content,
            // just ensure that the window is active
            if (rootFrame == null)
            {
                // Create a Frame to act as the navigation context and navigate to the first page
                rootFrame = new Frame();

                // TODO: change this value to a cache size that is appropriate for your application
                rootFrame.CacheSize = 1;

                // Set the default language
                rootFrame.Language = Windows.Globalization.ApplicationLanguages.Languages['['/]0[']'/];

                if (e.PreviousExecutionState == ApplicationExecutionState.Terminated)
                {
                    // TODO: Load state from previously suspended application
                }

                // Place the frame in the current Window
                Window.Current.Content = rootFrame;
            }

            if (rootFrame.Content == null)
            {
                // Removes the turnstile navigation for startup.
                if (rootFrame.ContentTransitions != null)
                {
                    this.transitions = new TransitionCollection();
                    foreach (var c in rootFrame.ContentTransitions)
                    {
                        this.transitions.Add(c);
                    }
                }

                rootFrame.ContentTransitions = null;
                rootFrame.Navigated += this.RootFrame_FirstNavigated;

                // When the navigation stack isn't restored navigate to the first page,
                // configuring the new page by passing required information as a navigation
                // parameter
                if (!rootFrame.Navigate(typeof(MainPage), e.Arguments))
                {
                    throw new Exception("Failed to create initial page");
                }
            }

            // Ensure the current window is active
            Window.Current.Activate();
        }

        /// <summary>
        /// Restores the content transitions after the app has launched.
        /// </summary>
        /// <param name="sender">The object where the handler is attached.</param>
        /// <param name="e">Details about the navigation event.</param>
        private void RootFrame_FirstNavigated(object sender, NavigationEventArgs e)
        {
            var rootFrame = sender as Frame;
            rootFrame.ContentTransitions = this.transitions ?? new TransitionCollection() { new NavigationThemeTransition() };
            rootFrame.Navigated -= this.RootFrame_FirstNavigated;
        }

        /// <summary>
        /// Invoked when application execution is being suspended.  Application state is saved
        /// without knowing whether the application will be terminated or resumed with the contents
        /// of memory still intact.
        /// </summary>
        /// <param name="sender">The source of the suspend request.</param>
        /// <param name="e">Details about the suspend request.</param>
        private void OnSuspending(object sender, SuspendingEventArgs e)
        {
            var deferral = e.SuspendingOperation.GetDeferral();

            // TODO: Save application state and stop any background activity
            deferral.Complete();
        }

		[for (aPackage : Package | aPackages)]
		[let aClasses: Set(Class) = aPackage.ownedElement->filter(Class) ]
		[if (aPackage.hasStereotype('DataProvider'))]
		[for (aClass : Class | aClasses)]		
		[if (aClass.hasStereotype('MobileAppDataInterface'))]
		/*
		* Handling the incoming data.
		* Go to ShareTargetPageView
		*/
         protected override void OnShareTargetActivated(ShareTargetActivatedEventArgs args)
        {
            Frame frame = Window.Current.Content as Frame;

            if (frame == null)
            {
                frame = new Frame();
                Window.Current.Content = frame;
            }

            if (frame.Content == null)
                frame.Navigate(typeof(ShareTargetPageView), args.ShareOperation);

            Window.Current.Activate();
        }
		[createShareTargetPage(model, p.name.toUpperFirst())/]
		[createShareTargetPageLayout(aPackage, p.name.toUpperFirst())/]
		[/if]
		[/for]
		[/if]
		[/let]
		[/for]
    }
}
[/file]
[/let]
[/let]
[/template]


[template public createShareTargetPage(model : Model, namespace : String)]
[let aPackages: Sequence(Package) = model.eAllContents(Package) ]

[file ('windows/Views/ShareTarget/ShareTargetView.xaml.cs', false)]
//[protected ('imports')]
using System;
using System.Collections.Generic;
using System.Text;
using Windows.ApplicationModel.DataTransfer;
using Windows.ApplicationModel.DataTransfer.ShareTarget;
using Windows.Storage;
using Windows.Storage.Streams;
using Windows.UI.Popups;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;
using Windows.UI.Xaml.Media.Imaging;
using Windows.UI.Xaml.Navigation;

//[/protected]

namespace [namespace/].Views
{
    public sealed partial class ShareTargetPageView : Page
	{
        ShareOperation operation = null;

        public ShareTargetPageView()
        {
            this.InitializeComponent();
        }

        protected override async void OnNavigatedTo(NavigationEventArgs e)
        {
            operation = (ShareOperation)e.Parameter;

[for (aPackage : Package | aPackages)]
	[let aClasses: Set(Class) = aPackage.ownedElement->filter(Class) ]
		[if (aPackage.hasStereotype('DataProvider'))]
		[for (aClass : Class | aClasses)]		
		[if (aClass.hasStereotype('MobileAppDataInterface'))]
			[let persistentEntityProperties : Set(Property) = (aClass.getAllAttributes()->select(getAppliedStereotypes()->exists(s: Stereotype |s.name='MobileAppDataProperty'))) ]			
				[for (p : Property | persistentEntityProperties)]
				[let receivedDataType : String = p.getValueOfStereotypePropertyEnumLit('Mobile Profile::MobileAppDataProperty', 'receivedDataType')]
				[if (receivedDataType = 'FILE')]
				if (operation.Data.Contains(StandardDataFormats.StorageItems)) //Files being shared
	            {
	                IReadOnlyList<IStorageItem> sharedStorageItems = await operation.Data.GetStorageItemsAsync();
	                StringBuilder fileNames = new StringBuilder();
	                for (int index = 0; index < sharedStorageItems.Count; index++)
	                {
	                    fileNames.Append(sharedStorageItems['['/]index[']'/].Name);
	                    if (index < sharedStorageItems.Count - 1)
	                    {
	                        fileNames.Append(", ");
	                    }
	                }
	                fileNames.Append(".");
	
	                MessageDialog ms = new MessageDialog("StorageItems: " + fileNames.ToString());
	                await ms.ShowAsync();
	            }
				[/if]
				[if (receivedDataType = 'URL')] 
				if (operation.Data.Contains(StandardDataFormats.WebLink)) //URI
	            {
	                var uri = await operation.Data.GetWebLinkAsync();
	                if (uri != null)
	                {
	                    MessageDialog ms = new MessageDialog("WebLink: " + uri.AbsoluteUri);
	                    await ms.ShowAsync();
	                }
	            }	
			 	[/if]
				[if(receivedDataType = 'TEXT')]
				if (operation.Data.Contains(StandardDataFormats.Text))//Text
	            {
	                MessageDialog ms = new MessageDialog("Text:" + await operation.Data.GetTextAsync());
	                await ms.ShowAsync();
	            }
				[/if]
				[if (receivedDataType = 'IMAGE')]
				if (operation.Data.Contains(StandardDataFormats.Bitmap)) { //Image
	                IRandomAccessStreamReference sharedBitmapStream = await operation.Data.GetBitmapAsync();
	                IRandomAccessStreamWithContentType bitmapStream = await sharedBitmapStream.OpenReadAsync();
	                BitmapImage bitmapImage = new BitmapImage();
	                bitmapImage.SetSource(bitmapStream);
	                MessageDialog ms = new MessageDialog("Image:" + bitmapStream);
	                await ms.ShowAsync();
            	}
				[/if]
				[/let]
				[/for]			
			[/let]
		[/if]
		[/for]
		[/if]
	[/let]
[/for]    
        }

        private void Button_Click(object sender, RoutedEventArgs e)
        {
            operation.ReportCompleted();
        }
    }
}

[/file]
[/let]
[/template]

[template public createShareTargetPageLayout(aPackage : Package, namespace : String)]
[let aClasses: Set(Class) = aPackage.ownedElement->filter(Class) ]

[file ('windows/Views/ShareTarget/ShareTargetView.xaml', false)]
<Page
    x:Class="[namespace/].Views.ShareTargetPageView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:[namespace/].Views">

    <Grid>
        <Button x:Name="button" Content="Done!" HorizontalAlignment="Left" Margin="154,186,0,0" VerticalAlignment="Top" Click="Button_Click"/>
    </Grid>
</Page>
[/file]
[/let]
[/template]

