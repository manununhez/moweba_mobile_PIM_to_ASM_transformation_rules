[comment encoding = UTF-8 /]
[module generateKVPages('http://www.eclipse.org/uml2/5.0.0/UML')]

[import services::uml2services/]
[import common::utils_gen/]


[template public generateKVPages(aClass : Class, modelName : String)]

[if (aClass.hasStereotype('persistentEntity'))]
[if (aClass.getValueOfStereotypePropertyEnumLit('Mobile Profile::persistentEntity', 'persistentType') = 'KeyValue')]
[let persistentEntityProperties: Set(Property) = aClass.getAllAttributes()->select(getAppliedStereotypes()->exists(s: Stereotype |s.name='persistentEntityProperty'))]	

[file (aClass.classFileName('windows/Views/'+aClass.name.toUpperFirst()+'/', aClass, 'View','.xaml.cs'), false)]
using [modelName/].Common;
using System;
using System.Collections.Generic;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;
using Windows.UI.Xaml.Navigation;
using WindowsStore.Common.Storage;

namespace [modelName/].Views
{

    public sealed partial class [aClass.name.toUpperFirst()/]View : Page
    {
        private NavigationHelper navigationHelper;
        
        public [aClass.name.toUpperFirst()/]View()
        {
            this.InitializeComponent();

            this.navigationHelper = new NavigationHelper(this);
            this.navigationHelper.LoadState += this.NavigationHelper_LoadState;
            this.navigationHelper.SaveState += this.NavigationHelper_SaveState;
        }

        public NavigationHelper NavigationHelper
        {
            get { return this.navigationHelper; }
        }


        private void NavigationHelper_LoadState(object sender, LoadStateEventArgs e)
        {
        }

        private void NavigationHelper_SaveState(object sender, SaveStateEventArgs e)
        {
        }


        protected override void OnNavigatedTo(NavigationEventArgs e)
        {
            this.navigationHelper.OnNavigatedTo(e);
        }

        protected override void OnNavigatedFrom(NavigationEventArgs e)
        {
            this.navigationHelper.OnNavigatedFrom(e);
        }


        private void listBoxobj_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (listBoxobj.SelectedIndex != -1)
            {

                Model.[aClass.name.toUpperFirst()/] listitem = listBoxobj.SelectedItem as Model.[aClass.name.toUpperFirst()/];//Get slected listbox item contact ID 
                Frame.Navigate(typeof([aClass.name.toUpperFirst()/]FormDeleteUpdate), listitem);
            }
        }

        private void ReadAllData_Loaded(object sender, RoutedEventArgs e)
        {
            StorageManager storage = new StorageManager("dataPersistence", false);
            Model.[aClass.name.toUpperFirst()/] [aClass.name.toLowerFirst()/] = storage.Load<Model.[aClass.name.toUpperFirst()/]>("[aClass.name.toLowerFirst()/]");
            
            List<Model.[aClass.name.toUpperFirst()/]> [aClass.name.toLowerFirst()/]List = new List<Model.[aClass.name.toUpperFirst()/]>();
            [aClass.name.toLowerFirst()/]List.Add([aClass.name.toLowerFirst()/]);
            listBoxobj.ItemsSource = [aClass.name.toLowerFirst()/]List;//Binding data to LISTBOX  
            txbQuantity.Text = Convert.ToString([aClass.name.toLowerFirst()/]List.Count);
        }

    }
}

[/file]
[/let]
[/if]
[/if]
[/template]
