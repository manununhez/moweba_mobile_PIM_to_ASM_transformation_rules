[comment encoding = UTF-8 /]
[module generateFilePages('http://www.eclipse.org/uml2/5.0.0/UML')]

[import services::uml2services/]
[import common::utils_gen/]

[template public generateFilePages(aClass : Class, modelName : String)]
[if (aClass.hasStereotype('persistentEntity'))]
[if (aClass.getValueOfStereotypePropertyEnumLit('Mobile Profile::persistentEntity', 'persistentType') = 'File')]
[let persistentEntityProperties : Set(Property) = (aClass.getAllAttributes()->select(getAppliedStereotypes()->exists(s: Stereotype |s.name='persistentEntityProperty'))) ]			

[file (aClass.classFileName('windows/Views/'+aClass.name.toUpperFirst()+'/', aClass, 'View','.xaml.cs'), false)]
//[protected ('imports')]
using [modelName/].Common;
using System;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;
using Windows.UI.Xaml.Navigation;
//[/protected]

namespace [modelName/].Views
{

    public sealed partial class [aClass.name.toUpperFirst()/]View : Page
    {
        private NavigationHelper navigationHelper;
        private string FILENAME = "prueba.txt";

        public [aClass.name.toUpperFirst()/]View()
        {
            this.InitializeComponent();

            this.navigationHelper = new NavigationHelper(this);
            this.navigationHelper.LoadState += this.NavigationHelper_LoadState;
            this.navigationHelper.SaveState += this.NavigationHelper_SaveState;
        }

        public NavigationHelper NavigationHelper
        {
            get { return this.navigationHelper; }
        }

        private void NavigationHelper_LoadState(object sender, LoadStateEventArgs e)
        {
        }

        private void NavigationHelper_SaveState(object sender, SaveStateEventArgs e)
        {
        }


        protected override void OnNavigatedTo(NavigationEventArgs e)
        {
            this.navigationHelper.OnNavigatedTo(e);
        }

        protected override void OnNavigatedFrom(NavigationEventArgs e)
        {
            this.navigationHelper.OnNavigatedFrom(e);
        }

        private async void btnWriteFile_Click(object sender, RoutedEventArgs e)
        {
			String content = [for (p : Property | persistentEntityProperties) separator(' + "," + ')][p.name.toLowerFirst()/]Tbx.Text[/for];
            await FileHelper.WriteTextFile(FILENAME, content);
        }

        private async void btnReadFile_Click(object sender, RoutedEventArgs e)
        {
            ResultTbx.Text = await FileHelper.ReadTextFile(FILENAME);
        }
    }
}

[/file]
[/let]
[/if]
[/if]
[/template]
