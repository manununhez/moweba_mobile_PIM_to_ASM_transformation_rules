[comment encoding = UTF-8 /]
[module generateSensorsPages('http://www.eclipse.org/uml2/5.0.0/UML')]

[import services::uml2services/]
[import common::utils_gen/]

[template public generateSensorsPages(aClass : Class, modelName : String)]
[if (aClass.hasStereotype('HardwareDeviceInterface'))]
[let persistentEntityProperties : Set(Property) = (aClass.getAllAttributes()->select(getAppliedStereotypes()->exists(s: Stereotype |s.name='HardwareDeviceProperty'))) ]			

[file (aClass.classFileName('windows/Views/'+aClass.name.toUpperFirst()+'/', aClass, 'View','.xaml.cs'), false)]

//[protected ('imports')]
using [modelName/].Common;
using System;
using Windows.Devices.Geolocation;
using Windows.Devices.Sensors;
using Windows.Foundation;
using Windows.UI.Core;
using Windows.UI.Popups;
using Windows.UI.Xaml.Controls;
using Windows.UI.Xaml.Navigation;
//[/protected]

namespace [modelName/].Views
{
    public sealed partial class [aClass.name.toUpperFirst()/]View : Page
    {
        private NavigationHelper navigationHelper;	
	[for (p : Property | persistentEntityProperties)]
		[if (p.getValueOfStereotypePropertyEnumLit('Mobile Profile::HardwareDeviceProperty', 'hardwareDeviceType') = 'Accelerometer')]
		public Accelerometer m[p.name.toUpperFirst()/]Accelerometer { get; set; }
		[elseif (p.getValueOfStereotypePropertyEnumLit('Mobile Profile::HardwareDeviceProperty', 'hardwareDeviceType') = 'Ambient_Light')]
	    public LightSensor m[p.name.toUpperFirst()/]Light { get; set; }
		[elseif (p.getValueOfStereotypePropertyEnumLit('Mobile Profile::HardwareDeviceProperty', 'hardwareDeviceType') = 'Gyroscope')]
	    public Gyrometer m[p.name.toUpperFirst()/]Gyroscope { get; set; }
		[elseif (p.getValueOfStereotypePropertyEnumLit('Mobile Profile::HardwareDeviceProperty', 'hardwareDeviceType') = 'Compass')]
	    public Compass m[p.name.toUpperFirst()/]Compass { get; set; }
		[/if]	
	[/for]
        //Use for get efficient signal intervals between accelerometer responses
        private uint desiredReportInterval { get; set; }
        
		public [aClass.name.toUpperFirst()/]View()
        {
            this.InitializeComponent();

            this.navigationHelper = new NavigationHelper(this);
            this.navigationHelper.LoadState += this.NavigationHelper_LoadState;
            this.navigationHelper.SaveState += this.NavigationHelper_SaveState;

		[for (p : Property | persistentEntityProperties)]
			[if (p.getValueOfStereotypePropertyEnumLit('Mobile Profile::HardwareDeviceProperty', 'hardwareDeviceType') = 'Accelerometer')]
			m[p.name.toUpperFirst()/]Accelerometer = Accelerometer.GetDefault();
			[elseif (p.getValueOfStereotypePropertyEnumLit('Mobile Profile::HardwareDeviceProperty', 'hardwareDeviceType') = 'Ambient_Light')]
		    m[p.name.toUpperFirst()/]Light = LightSensor.GetDefault();
			[elseif (p.getValueOfStereotypePropertyEnumLit('Mobile Profile::HardwareDeviceProperty', 'hardwareDeviceType') = 'Gyroscope')]
		    m[p.name.toUpperFirst()/]Gyroscope = Gyrometer.GetDefault();
			[elseif (p.getValueOfStereotypePropertyEnumLit('Mobile Profile::HardwareDeviceProperty', 'hardwareDeviceType') = 'Compass')]
		    m[p.name.toUpperFirst()/]Compass = Compass.GetDefault();
			[/if]	
		[/for]

            if (accelerometer != null && gyrometer != null)
            {
                // Select a report interval that is both suitable for the purposes of the app and supported by the sensor.
                // This value will be used later to activate the sensor.
                uint minReportInterval = accelerometer.MinimumReportInterval;
                desiredReportInterval = minReportInterval > 16 ? minReportInterval : 16;

		[for (p : Property | persistentEntityProperties)]
			[if (p.getValueOfStereotypePropertyEnumLit('Mobile Profile::HardwareDeviceProperty', 'hardwareDeviceType') = 'Accelerometer')]
			m[p.name.toUpperFirst()/]Accelerometer.ReportInterval = desiredReportInterval;
			//add event for sensors readings
            m[p.name.toUpperFirst()/]Accelerometer.ReadingChanged += new TypedEventHandler<Accelerometer, AccelerometerReadingChangedEventArgs>(ReadingChanged);
			[elseif (p.getValueOfStereotypePropertyEnumLit('Mobile Profile::HardwareDeviceProperty', 'hardwareDeviceType') = 'Ambient_Light')]
		    m[p.name.toUpperFirst()/]Light.ReportInterval = desiredReportInterval;
			//add event for sensors readings
            m[p.name.toUpperFirst()/]Light.ReadingChanged += new TypedEventHandler<Accelerometer, LightSensorReadingChangedEventArgs>(ReadingChanged);
			[elseif (p.getValueOfStereotypePropertyEnumLit('Mobile Profile::HardwareDeviceProperty', 'hardwareDeviceType') = 'Gyroscope')]
		    m[p.name.toUpperFirst()/]Gyroscope.ReportInterval = desiredReportInterval;
			//add event for sensors readings
             m[p.name.toUpperFirst()/]Gyroscope.ReadingChanged += new TypedEventHandler<Accelerometer, GyrometerReadingChangedEventArgs>(ReadingChanged);
			[elseif (p.getValueOfStereotypePropertyEnumLit('Mobile Profile::HardwareDeviceProperty', 'hardwareDeviceType') = 'Compass')]
		    m[p.name.toUpperFirst()/]Compass.ReportInterval = desiredReportInterval;
			//add event for sensors readings
            m[p.name.toUpperFirst()/]Compass.ReadingChanged += new TypedEventHandler<Accelerometer, CompassReadingChangedEventArgs>(ReadingChanged);
			[/if]	
		[/for]

            }
            else
            {
                MessageDialog ms = new MessageDialog("No accelerometer Found");
                ms.ShowAsync();
            }

            this.NavigationCacheMode = NavigationCacheMode.Required;
        }

        public NavigationHelper NavigationHelper
        {
            get { return this.navigationHelper; }
        }

        private void NavigationHelper_LoadState(object sender, LoadStateEventArgs e)
        {
        }

        private void NavigationHelper_SaveState(object sender, SaveStateEventArgs e)
        {
        }

        protected override void OnNavigatedTo(NavigationEventArgs e)
        {
            this.navigationHelper.OnNavigatedTo(e);
        }

        protected override void OnNavigatedFrom(NavigationEventArgs e)
        {
            this.navigationHelper.OnNavigatedFrom(e);
        }


		/// <summary>
        /// reading accelerometer changes
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="args"></param>
        private async void ReadingChanged(Accelerometer sender, AccelerometerReadingChangedEventArgs args)
        {
            await Dispatcher.RunAsync(CoreDispatcherPriority.Normal, () =>
            {
                AccelerometerReading reading = args.Reading;
			[for (p : Property | persistentEntityProperties)]
			[if (p.getValueOfStereotypePropertyEnumLit('Mobile Profile::HardwareDeviceProperty', 'hardwareDeviceType') = 'Accelerometer')]
                [p.name.toUpperFirst()/]Tbx.Text = reading.AccelerationX+","+ reading.AccelerationY+","+ reading.AccelerationZ;
			[/if]	
			[/for]
            });
        }
		
		/// <summary>
        /// reading ambient light changes
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="args"></param>
        private async void ReadingChanged(LightSensor sender, LightSensorReadingChangedEventArgs args)
        {
            await Dispatcher.RunAsync(CoreDispatcherPriority.Normal, () =>
            {
                LightSensorReading reading = args.Reading;
			[for (p : Property | persistentEntityProperties)]
			[if (p.getValueOfStereotypePropertyEnumLit('Mobile Profile::HardwareDeviceProperty', 'hardwareDeviceType') = 'Ambient_Light')]
                [p.name.toUpperFirst()/]Tbx.Text = reading.IlluminanceInLux+"/"+reading.Timestamp;
			[/if]	
			[/for]
            });
        }

		/// <summary>
        /// reading gyroscope changes
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="args"></param>
        private async void ReadingChanged(Gyrometer sender, GyrometerReadingChangedEventArgs args)
        {
            await Dispatcher.RunAsync(CoreDispatcherPriority.Normal, () =>
            {
                GyrometerReading reading = args.Reading;
			[for (p : Property | persistentEntityProperties)]
			[if (p.getValueOfStereotypePropertyEnumLit('Mobile Profile::HardwareDeviceProperty', 'hardwareDeviceType') = 'Gyroscope')]
                [p.name.toUpperFirst()/]Tbx.Text = reading.AngularVelocityX+","+reading.AngularVelocityY+","+reading.AngularVelocityZ;
			[/if]	
			[/for]
            });
        }
	
		/// <summary>
        /// reading compass changes
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="args"></param>
        private async void ReadingChanged(Compass sender, CompassReadingChangedEventArgs args)
        {
            await Dispatcher.RunAsync(CoreDispatcherPriority.Normal, () =>
            {
                CompassReading reading = args.Reading;
			[for (p : Property | persistentEntityProperties)]
			[if (p.getValueOfStereotypePropertyEnumLit('Mobile Profile::HardwareDeviceProperty', 'hardwareDeviceType') = 'Compass')]
                [p.name.toUpperFirst()/]Tbx.Text = reading.HeadingAccuracy+","+reading.HeadingMagneticNorth+","+reading.HeadingTrueNorth;
			[/if]	
			[/for]
            });
        }

	[for (p : Property | persistentEntityProperties)]
		[if (p.getValueOfStereotypePropertyEnumLit('Mobile Profile::HardwareDeviceProperty', 'hardwareDeviceType') = 'Microphone')]
	    private void btn[p.name.toUpperFirst()/]AudioRecord_Click(object sender, Windows.UI.Xaml.RoutedEventArgs e)
        {
            Frame.Navigate(typeof(AudioRecordView));
        }
		[elseif (p.getValueOfStereotypePropertyEnumLit('Mobile Profile::HardwareDeviceProperty', 'hardwareDeviceType') = 'Camera')]
        private void btn[p.name.toUpperFirst()/]Camera_Click(object sender, Windows.UI.Xaml.RoutedEventArgs e)
        {
            Frame.Navigate(typeof(CameraView));
        }
		[elseif (p.getValueOfStereotypePropertyEnumLit('Mobile Profile::HardwareDeviceProperty', 'hardwareDeviceType') = 'GPS')]
	    private async void btn[p.name.toUpperFirst()/]GPS_Click(object sender, Windows.UI.Xaml.RoutedEventArgs e)
        {
            Geolocator geolocator = new Geolocator();
            geolocator.DesiredAccuracyInMeters = 50;

            try
            {
                Geoposition geoposition = await geolocator.GetGeopositionAsync(
                     maximumAge: TimeSpan.FromMinutes(5),
                     timeout: TimeSpan.FromSeconds(10)
                    );

                //With this 2 lines of code, the app is able to write on a Text Label the Latitude and the Longitude, given by {{Icode|geoposition}}
                [p.name.toUpperFirst()/]Tbx.Text = "GPS:" + geoposition.Coordinate.Point.Position.Latitude.ToString("0.00") + ", " + geoposition.Coordinate.Point.Position.Longitude.ToString("0.00");
            }
            //If an error is catch 2 are the main causes: the first is that you forgot to include ID_CAP_LOCATION in your app manifest. 
            //The second is that the user doesn't turned on the Location Services
            catch (Exception ex)
            {
                //exception
            }
        }
	[/if]
	[/for]

    }

}
[/file]
[/let]
[/if]
[/template]

[template public generateCameraPages(aClass : Class, modelName : String)]
[file (aClass.classFileName('windows/Views/Camera/', aClass, 'View','.xaml.cs'), false)]
using System;
using Windows.Media.Capture;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;
using Windows.UI.Xaml.Navigation;

using Windows.Media.MediaProperties;    //For Encoding Image in JPEG format
using Windows.Storage;                  //For storing Capture Image in App storage or in Picture Library
using Windows.UI.Xaml.Media.Imaging;    //For BitmapImage. for showing image on screen we need BitmapImage format.
using [modelName/].Common;


namespace [modelName/].Views
{

    public sealed partial class CameraView : Page
    {
        private NavigationHelper navigationHelper;

        public CameraView()
        {
            this.InitializeComponent();

            this.navigationHelper = new NavigationHelper(this);

        }

        //Declare MediaCapture object globally
        MediaCapture captureManager;


        async private void Start_Capture_Preview_Click(object sender, RoutedEventArgs e)
        {
            captureManager = new MediaCapture();        //Define MediaCapture object
            await captureManager.InitializeAsync();     //Initialize MediaCapture and 
            capturePreview.Source = captureManager;     //Start preiving on CaptureElement
            await captureManager.StartPreviewAsync();   //Start camera capturing 
        }

        async private void Stop_Capture_Preview_Click(object sender, RoutedEventArgs e)
        {
            await captureManager.StopPreviewAsync();    //stop camera capturing
        }

        async private void Capture_Photo_Click(object sender, RoutedEventArgs e)
        {
			string fileName = "Photo.jpg";
            //Create JPEG image Encoding format for storing image in JPEG type
            ImageEncodingProperties imgFormat = ImageEncodingProperties.CreateJpeg();

            // create storage file in local app storage
            StorageFile file = await ApplicationData.Current.LocalFolder.CreateFileAsync(fileName, CreationCollisionOption.ReplaceExisting);

            // take photo and store it on file location.
            await captureManager.CapturePhotoToStorageFileAsync(imgFormat, file);

            //// create storage file in Picture Library
            //StorageFile file = await KnownFolders.PicturesLibrary.CreateFileAsync(fileName,CreationCollisionOption.GenerateUniqueName);

            // Get photo as a BitmapImage using storage file path.
            BitmapImage bmpImage = new BitmapImage(new Uri(file.Path));

            // show captured image on Image UIElement.
            imagePreview.Source = bmpImage;

        }

        public NavigationHelper NavigationHelper
        {
            get { return this.navigationHelper; }
        }

        private void NavigationHelper_LoadState(object sender, LoadStateEventArgs e)
        {
        }

        private void NavigationHelper_SaveState(object sender, SaveStateEventArgs e)
        {
        }

        protected override void OnNavigatedTo(NavigationEventArgs e)
        {
            this.navigationHelper.OnNavigatedTo(e);
        }

        protected override void OnNavigatedFrom(NavigationEventArgs e)
        {
            this.navigationHelper.OnNavigatedFrom(e);
        }

    }
}


[/file]
[/template]

[template public generateCameraPagesLayout(aClass : Class, modelName : String)]
[file (aClass.classFileName('windows/Views/Camera/', aClass, 'View','.xaml'), false)]
<Page
    x:Class="[modelName/].Views.CameraView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:[modelName/].Views">
    <Grid>
        <CaptureElement x:Name="capturePreview" Margin="0,0,0,378" />
        <Image x:Name="imagePreview" Margin="0,262,0,115" />

        <!--<Button Click="Save_Picture_librory" Content="Save Picture" Margin="229,580,0,0" Height="60" Width="161" />-->
        <Button Click="Start_Capture_Preview_Click" Content="Start Capture Preview" Margin="8,529,0,51" Height="60" Width="221" />
        <Button Click="Capture_Photo_Click" Content="Capture Photo" Margin="243,529,0,1" Width="147" Height="110"/>
        <Button Click="Stop_Capture_Preview_Click" Content="Stop Capture Preview" Margin="10,580,0,0" Height="60" Width="219"/>
    </Grid>
</Page>

[/file]
[/template]
[template public generateAudioRecordPages(aClass : Class, modelName : String)]
[file (aClass.classFileName('windows/Views/AudioRecord/', aClass, 'View','.xaml.cs'), false)]
using [modelName/].Common;
using System;
using System.Diagnostics;
using Windows.Media;
using Windows.Media.Capture;
using Windows.Media.MediaProperties;
using Windows.Storage;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;
using Windows.UI.Xaml.Navigation;


namespace [modelName/].Views
{

    public sealed partial class AudioRecordView : Page
    {
        private NavigationHelper navigationHelper;

        private MediaCapture _mediaCaptureManager;
        private StorageFile _recordStorageFile;
        private bool _recording;
        private bool _userRequestedRaw;
        private bool _rawAudioSupported;

        public AudioRecordView()
        {
            this.InitializeComponent();

            this.navigationHelper = new NavigationHelper(this);
            this.navigationHelper.LoadState += this.NavigationHelper_LoadState;
            this.navigationHelper.SaveState += this.NavigationHelper_SaveState;

            InitializeAudioRecording();
        }

        private async void InitializeAudioRecording()
        {

            _mediaCaptureManager = new MediaCapture();
            var settings = new MediaCaptureInitializationSettings();
            settings.StreamingCaptureMode = StreamingCaptureMode.Audio;
            settings.MediaCategory = MediaCategory.Other;
            settings.AudioProcessing = (_rawAudioSupported && _userRequestedRaw) ? AudioProcessing.Raw : AudioProcessing.Default;

            await _mediaCaptureManager.InitializeAsync(settings);

            Debug.WriteLine("Device initialised successfully");
        }

        private async void CaptureAudio()
        {
            try
            {
                Debug.WriteLine("Starting record");
                String fileName = "[aClass.name.toLowerFirst()/].m4a";

                _recordStorageFile = await KnownFolders.VideosLibrary.CreateFileAsync(fileName, CreationCollisionOption.GenerateUniqueName);

                Debug.WriteLine("Create record file successfully");

                MediaEncodingProfile recordProfile = MediaEncodingProfile.CreateM4a(AudioEncodingQuality.Auto);
                await _mediaCaptureManager.StartRecordToStorageFileAsync(recordProfile, this._recordStorageFile);

                Debug.WriteLine("Start Record successful");

                _recording = true;
            }
            catch (Exception e)
            {
                Debug.WriteLine("Failed to capture audio");
            }
        }

        private async void StopCapture()
        {

            if (_recording)
            {
                Debug.WriteLine("Stopping recording");
                await _mediaCaptureManager.StopRecordAsync();
                Debug.WriteLine("Stop recording successful");
                _recording = false;
            }

        }

        private async void PlayRecordedCapture()
        {
            if (!_recording)
            {
                var stream = await _recordStorageFile.OpenAsync(FileAccessMode.Read);
                Debug.WriteLine("Recording file opened");
                playbackElement1.AutoPlay = true;
                playbackElement1.SetSource(stream, _recordStorageFile.FileType);
                playbackElement1.Play();
            }
        }

        public NavigationHelper NavigationHelper
        {
            get { return this.navigationHelper; }
        }

        private void NavigationHelper_LoadState(object sender, LoadStateEventArgs e)
        {
        }

        private void NavigationHelper_SaveState(object sender, SaveStateEventArgs e)
        {
        }

        protected override void OnNavigatedTo(NavigationEventArgs e)
        {
            this.navigationHelper.OnNavigatedTo(e);
        }

        protected override void OnNavigatedFrom(NavigationEventArgs e)
        {
            this.navigationHelper.OnNavigatedFrom(e);
        }

        private void CaptureButton_Click(object sender, RoutedEventArgs e)
        {
            CaptureAudio();
        }

        private void StopCaptureButton_Click(object sender, RoutedEventArgs e)
        {
            StopCapture();
        }

        private void PlayRecordButton_Click(object sender, RoutedEventArgs e)
        {
            PlayRecordedCapture();
        }
    }
}

[/file]
[/template]

[template public generateAudioRecordPagesLayout(aClass : Class, modelName : String)]
[file (aClass.classFileName('windows/Views/AudioRecord/', aClass, 'View','.xaml'), false)]
<Page
    x:Class="[modelName/].Views.AudioRecordView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:[modelName/].Views">
    <Grid>
        <MediaElement x:Name="playbackElement1" ></MediaElement>
        <Button x:Name="CaptureButton" Content="Capture Audio" HorizontalAlignment="Center" Margin="0,184,0,0" VerticalAlignment="Top" Click="CaptureButton_Click" Width="145"/>
        <Button x:Name="StopCaptureButton" Content="Stop Capture" HorizontalAlignment="Center" Margin="0,284,0,0" VerticalAlignment="Top" Click="StopCaptureButton_Click" Width="145"/>
        <Button x:Name="PlayRecordButton" Content="Play Capture" HorizontalAlignment="Center" Margin="0,380,0,0" VerticalAlignment="Top" Click="PlayRecordButton_Click" Width="145"/>
    </Grid>
</Page>
[/file]
[/template]
