[comment encoding = UTF-8 /]
[module generate('http://www.eclipse.org/uml2/5.0.0/UML')]

[import mobileCodeGenerator::main::android::config::generateConfigFiles/]
[import mobileCodeGenerator::main::android::config::generateBuildGradle/]

[import mobileCodeGenerator::main::android::beans::beansGenAndroid/]

[import mobileCodeGenerator::main::android::rest::generateRestInterface/]
[import mobileCodeGenerator::main::android::rest::generateRestClient/]


[import mobileCodeGenerator::main::android::bd::createAndroidDatabase/]
[import mobileCodeGenerator::main::android::bd::tables::generateDbTables/]
[import mobileCodeGenerator::main::android::bd::dao::generateDaoAndroid/]

[import mobileCodeGenerator::main::android::files::createFileHelper/]

[import mobileCodeGenerator::main::android::keyvalue::createSharedHelper/]

[import mobileCodeGenerator::main::android::adapter::generateBDAdapters/]
[import mobileCodeGenerator::main::android::adapter::generateKVAdapters/]

[import mobileCodeGenerator::main::android::activities::generateMainActivity/]
[import mobileCodeGenerator::main::android::activities::generateBDActivities/]
[import mobileCodeGenerator::main::android::activities::generateFileActivities/]
[import mobileCodeGenerator::main::android::activities::generateKVActivities/]
[import mobileCodeGenerator::main::android::activities::generateRestActivities/]
[import mobileCodeGenerator::main::android::activities::generateBDFormActivities/]
[import mobileCodeGenerator::main::android::activities::generateKVFormActivities/]
[import mobileCodeGenerator::main::android::activities::generateSensorActivities/]

[import mobileCodeGenerator::main::windows::pages::generateMainPage/]
[import mobileCodeGenerator::main::windows::pages::generateBDPages/]
[import mobileCodeGenerator::main::windows::pages::generateBDCreateFormPage/]
[import mobileCodeGenerator::main::windows::pages::generateBDDeleteUpdateFormPage/]
[import mobileCodeGenerator::main::windows::pages::generateFilePages/]
[import mobileCodeGenerator::main::windows::pages::generateKVPages/]
[import mobileCodeGenerator::main::windows::pages::generateKVDeleteUpdateFormPage/]
[import mobileCodeGenerator::main::windows::pages::generateRestPages/]
[import mobileCodeGenerator::main::windows::pages::generateSensorsPages/]

[import mobileCodeGenerator::main::windows::beans::beansGenWindows/]

[import mobileCodeGenerator::main::windows::generateAppPage/]

[import mobileCodeGenerator::main::windows::bd::createWindowsDatabaseHelper/]
[import mobileCodeGenerator::main::windows::bd::dao::generateDaoWindows/]

[import mobileCodeGenerator::main::windows::files::createFileHelperWindows/]

[import mobileCodeGenerator::main::windows::keyvalue::createSharedHelperWindows/]

[import mobileCodeGenerator::main::windows::rest::generateRestWindowsInterface/]

[import services::uml2services/]
[import common::utils_gen/]


[template public generateElement(model: Model)]
[comment @main/]
[let aPackages: Sequence(Package) = model.eAllContents(Package) ]

[generateGeneralAndroidClasses(model)/]
[generateGeneralWindowsClasses(model)/]

[for (aPackage : Package | aPackages)]
[let aClasses: Set(Class) = aPackage.ownedElement->filter(Class) ]
[let p : Package = aPackage.ancestors(Package)->first()]		
[comment]We go through the existing packages in the model. We are only interested in two packages:
DataPersistence and DataProvider[/comment]

	[comment]If the DataPersistence package exists[/comment]
	[if (aPackage.hasStereotype('DataPersistence'))]
	    
		[comment]Generate the beans or models of the application[/comment]
		[beansGenAndroid(aPackage, p.name.toLower())/]
		[beansGenWindows(aPackage)/]

		[comment]We only create this file if there is at least one Database type entity[/comment]
		[if (aPackage.isPackageHasThisPropertyStereotype('persistentEntity', 'persistentType', 'Database'))]
			[generateDBForAndroid(aPackage, p.name.toLower())/]
			[generateDBForWindows(aPackage, p.name.toUpperFirst())/]
		[/if]
	
		[comment]We only create this file if there is at least one File entity type[/comment]
		[if (aPackage.isPackageHasThisPropertyStereotype('persistentEntity', 'persistentType', 'File'))]
			[generateFilesForAndroid(aPackage, p.name.toLower())/]
			[generateFilesForWindows(aPackage, p.name.toUpperFirst())/]
		[/if]
	
		[comment]We only create this file if there is at least one KeyValue entity type[/comment]
		[if (aPackage.isPackageHasThisPropertyStereotype('persistentEntity', 'persistentType', 'KeyValue'))]
			[generateKVForAndroid(aPackage, p.name.toLower())/]
			[generateKVForWindows(aPackage, p.name.toUpperFirst())/]
		[/if]
	[/if]
	
	[comment]If the DataProvider package exists[/comment]
	[if (aPackage.hasStereotype('DataProvider'))]
		[for (aClass : Class | aClasses)]
			[comment]If the class has the WebServiceInterface package[/comment]
			[if (aClass.hasStereotype('WebServiceInterface'))]
				[generateRestAndroid(aClass, p.name.toLower())/]
				[generateRestWindows(aClass, p.name.toUpperFirst())/]
			[/if]
			
			[comment]If the class has the HardwareDeviceInterface package[/comment]
			[if (aClass.hasStereotype('HardwareDeviceInterface'))]
				[generateSensorsAndroid(aClass, p.name.toLower())/]
				[generateSensorsWindows(aClass, p.name.toUpperFirst())/]
			[/if]
		[/for]
	[/if]
[/let]
[/let]
[/for]
[/let]
[/template]

[comment]*****************************************
We generate the main Android classes.
It is generated:
- MainActivity and its XML layout, which constitutes
the main screen of the application.
- The configuration file: AndroidManifest.xml,
where the screens of the app, and the permits to use 
are defined.
- The build.gradle, responsible for managing and importing
libraries of the application.
*****************************************[/comment]
[template public generateGeneralAndroidClasses(model : Model)]
	[generateMainActivity(model)/]
	[generateMainActivityLayout(model)/]
	[generateConfigFiles(model)/]
	[generateBuildGradle(model)/]
[/template]


[comment]*****************************************
We generate the main Windows Phone classes:
- The App.xaml.cs, constitutes the input file of the application.
- The MainPage and its interface, constitutes the main screen
of the application. 
*****************************************[/comment]
[template public generateGeneralWindowsClasses(model : Model)]
	[generateAppPage(model)/]
	[generateMainPage(model)/]
	[generateMainPageLayout(model)/]
[/template]


[comment]*****************************************
We generate the necessary files for the configuration of SQLite in Android:
the helper, the tables and the DAO.
In addition, the screens are generated to test the CRUD functions
for each table. Two screens are generated for each table:
- A screen where all the data in the table is listed
- A screen to add new data, update or delete.
*****************************************[/comment]
[template public generateDBForAndroid(aPackage : Package, namespace : String)]
[let aClasses: Set(Class) = aPackage.ownedElement->filter(Class) ]

[comment]We generate the helper for database: MySqliteHelper.java[/comment]
[createDatabaseAndroid(aPackage, namespace)/]


	[for (aClass : Class | aClasses)]
		[comment]We verify that the class has the stereotype 'persistentEntity'[/comment]
		[if (aClass.hasStereotype('persistentEntity'))]
		[comment]We verify that the tag value 'persistentType' is for Database[/comment]
			[if (aClass.getValueOfStereotypePropertyEnumLit('Mobile Profile::persistentEntity', 'persistentType') = 'Database')]
				
				[comment]We generate the screen to list the data of each entity[/comment]
				[generateBDActivities(aClass, namespace)/]
				[generateaBDActivitiesLayout(aClass)/]
			
				[comment]We generate screens for Add, Edit and Delete data (CRUD)[/comment]
				[generateBDFormActivities(aClass, namespace)/]
				[generateBDFormActivitiesLayout(aClass)/]
			
				[comment]We generate the adapters to load the different fields of each row of the table[/comment]
				[generateBDAdapters(aClass, namespace)/]
				[generateBDAdapterLayout(aClass)/]
			
				[comment]We generate the tables for each 'persistentEntity', with the fields with stereotype 'persistentEntityProperty'[/comment]
				[generateDbTables(aClass, namespace)/]
			
				[comment]We generate the CRUD functions for each table[/comment]
				[generateDaoAndroid(aClass, namespace)/]
			[/if]
		[/if]
	[/for]
[/let]
[/template]

[comment]*****************************************

*****************************************[/comment]
[template public generateDBForWindows(aPackage : Package, namespace : String)]
[let aClasses: Set(Class) = aPackage.ownedElement->filter(Class) ]

[comment]We generate the helper for database: SQLiteHelper.cs[/comment]
[createWindowsDatabaseHelper(aPackage, namespace)/]


[for (aClass : Class | aClasses)]
	[comment]We verify that the class has the stereotype 'persistentEntity'[/comment]
	[if (aClass.hasStereotype('persistentEntity'))]
		[comment]We verify that the tag value 'persistentType' is for Database[/comment]
		[if (aClass.getValueOfStereotypePropertyEnumLit('Mobile Profile::persistentEntity', 'persistentType') = 'Database')]
			
			[comment]We generate the screen to list the data of each entity[/comment]
			[generateBDPages(aClass, namespace)/]
			[generateBDPagesLayout(aClass, namespace)/]
		
			[generateBDCreateFormPage(aClass, namespace)/]
			[generateBDCreateFormPageLayout(aClass, namespace)/]
			
			[generateBDDeleteUpdateFormPage(aClass, namespace)/]
			[generateBDDeleteUpdateFormPageLayout(aClass, namespace)/]
			
			[comment]We generate the CRUD functions for each table[/comment]
			[generateDaoWindows(aClass, namespace)/]
		[/if]
	[/if]
[/for]
[/let]
[/template]


[comment]*****************************************

*****************************************[/comment]
[template public generateFilesForAndroid(aPackage : Package, namespace : String)]
[let aClasses: Set(Class) = aPackage.ownedElement->filter(Class) ]

[comment]We generate the helper for files: FilesHelper.java[/comment]
[createFileHelper(aPackage, namespace)/]

	[for (aClass : Class | aClasses)]
		[comment]We verify that the class has the stereotype 'persistentEntity'[/comment]
		[if (aClass.hasStereotype('persistentEntity'))]
			[comment]We verify that the tag value 'persistentType' is for Files[/comment]
			[if (aClass.getValueOfStereotypePropertyEnumLit('Mobile Profile::persistentEntity', 'persistentType') = 'File')]
				[generateFileActivities(aClass, namespace)/]
				[generateFileActivitiesLayout(aClass)/]
			[/if]
		[/if]
	[/for]
[/let]
[/template]

[comment]*****************************************

*****************************************[/comment]
[template public generateFilesForWindows(aPackage : Package, namespace : String)]
[let aClasses: Set(Class) = aPackage.ownedElement->filter(Class) ]

[comment]We generate the helper for files: FilesHelper.cs[/comment]
[createFileHelperWindows(aPackage, namespace)/]
	
	[for (aClass : Class | aClasses)]
		[comment]We verify that the class has the stereotype 'persistentEntity'[/comment]
		[if (aClass.hasStereotype('persistentEntity'))]
			[comment]We verify that the tag value 'persistentType' is for Files[/comment]
			[if (aClass.getValueOfStereotypePropertyEnumLit('Mobile Profile::persistentEntity', 'persistentType') = 'File')]
				[generateFilePages(aClass, namespace)/]
				[generateFilePagesLayout(aClass, namespace)/]
			[/if]
		[/if]
	[/for]
[/let]
[/template]

[comment]*****************************************

*****************************************[/comment]
[template public generateKVForAndroid(aPackage : Package, namespace : String)]
[let aClasses: Set(Class) = aPackage.ownedElement->filter(Class) ]

[comment]We generate the helper for Key-values: StorageManager.java[/comment]
[createSharedHelper(aPackage, namespace)/]

	[for (aClass : Class | aClasses)]
		[comment]We verify that the class has the stereotype 'persistentEntity'[/comment]
		[if (aClass.hasStereotype('persistentEntity'))]
			[comment]We verify that the tag value 'persistentType' is for Key-values[/comment]
			[if (aClass.getValueOfStereotypePropertyEnumLit('Mobile Profile::persistentEntity', 'persistentType') = 'KeyValue')]

				[generateKVActivities(aClass, namespace)/]
				[generateKVActivitiesLayout(aClass)/]
		
				[generateKVFormActivities(aClass, namespace)/]
				[generateKVFormActivitiesLayout(aClass)/]
			
				[generateKVAdapters(aClass, namespace)/]
				[generateKVAdapterLayout(aClass)/]
			[/if]
		[/if]
	[/for]
[/let]
[/template]

[comment]*****************************************

*****************************************[/comment]
[template public generateKVForWindows(aPackage : Package, namespace : String)]
[let aClasses: Set(Class) = aPackage.ownedElement->filter(Class) ]

[comment]We generate the helper for Key-values: StorageManager.cs[/comment]
[createSharedHelperWindows(aPackage)/]

	[for (aClass : Class | aClasses)]
		[comment]We verify that the class has the stereotype 'persistentEntity'[/comment]
		[if (aClass.hasStereotype('persistentEntity'))]
			[comment]We verify that the tag value 'persistentType' is for Key-values[/comment]
			[if (aClass.getValueOfStereotypePropertyEnumLit('Mobile Profile::persistentEntity', 'persistentType') = 'KeyValue')]
				[generateKVPages(aClass, namespace)/]
				[generateKVPagesLayout(aClass, namespace)/]
		
				[generateKVDeleteUpdateFormPage(aClass, namespace)/]
				[generateKVDeleteUpdateFormPageLayout(aClass, namespace)/]
			[/if]
		[/if]
	[/for]
[/let]
[/template]

[comment]*****************************************

*****************************************[/comment]
[template public generateRestAndroid(aClass : Class, namespace : String)]
	[comment]We verify that the class has the stereotype 'WebServiceInterface'[/comment]
	[if (aClass.hasStereotype('WebServiceInterface'))]
		[comment]We generate ApiInterface.java[/comment]
		[generateRestInterface(aClass, namespace)/]
		
		[comment]We generate ApiClient.java[/comment]
		[generateRestClient(aClass, namespace)/]
		
		[generateRestActivities(aClass, namespace)/]
		[generateRestActivitiesLayout(aClass)/]
	[/if]
[/template]

[comment]*****************************************

*****************************************[/comment]
[template public generateRestWindows(aClass : Class, namespace : String)]
	[comment]We verify that the class has the stereotype 'WebServiceInterface'[/comment]
	[if (aClass.hasStereotype('WebServiceInterface'))]
		[comment]We generate ApiInterface.cs[/comment]
		[generateRestWindowsInterface(aClass, namespace)/]
		
		[generateRestPages(aClass, namespace)/]
		[generateRestPagesLayout(aClass, namespace)/]
	[/if]
[/template]

[comment]*****************************************

*****************************************[/comment]
[template public generateSensorsAndroid(aClass : Class, namespace : String)]
	[comment]We generate the sensors utils for: camera and microphone[/comment]
	[generateGPSClass(aClass, namespace)/]
	[generateAudioActivity(aClass, namespace)/]
	[generateAudioActivityLayout(aClass)/]
	[generateCameraActivity(aClass, namespace)/]
	[generateCameraActivityLayout(aClass)/]

	[comment]We verify that the class has the stereotype 'HardwareDeviceInterface'[/comment]
	[if (aClass.hasStereotype('HardwareDeviceInterface'))]
		[generateSensorActivities(aClass, namespace)/]
		[generateSensorActivitiesLayout(aClass)/]
	[/if]
[/template]

[comment]*****************************************

*****************************************[/comment]
[template public generateSensorsWindows(aClass : Class, namespace : String)]
	[comment]We generate the sensors utils for: camera and microphone[/comment]
	[generateCameraPages(aClass, namespace)/]
	[generateCameraPagesLayout(aClass, namespace)/]
	[generateAudioRecordPages(aClass, namespace)/]
	[generateAudioRecordPagesLayout(aClass, namespace)/]

	[comment]We verify that the class has the stereotype 'HardwareDeviceInterface'[/comment]
	[if (aClass.hasStereotype('HardwareDeviceInterface'))]
		[generateSensorsPages(aClass, namespace)/]
		[generateSensorsPagesLayout(aClass, namespace)/]
	[/if]
[/template]





