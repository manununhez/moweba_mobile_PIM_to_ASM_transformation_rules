[comment encoding = UTF-8 /]
[module generateSensorActivities('http://www.eclipse.org/uml2/5.0.0/UML')]

[import services::uml2services/]
[import common::utils_gen/]

[template public generateSensorActivities(aClass : Class, namespace : String)]
[let persistentEntityProperties : Set(Property) = (aClass.getAllAttributes()->select(getAppliedStereotypes()->exists(s: Stereotype |s.name='HardwareDeviceProperty'))) ]			

[file (aClass.classFileName('android/app/src/main/java/com/example/'+namespace+'/activities/', aClass, 'Activity','.java'), false)]

package com.example.[namespace/].activities;

//[protected ('imports')]
import android.content.Context;
import android.content.Intent;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.location.Location;
import android.os.Bundle;
import android.support.v7.app.ActionBar;
import android.support.v7.app.AppCompatActivity;
import android.view.View;
import android.view.MenuItem;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import com.example.[namespace/].R;
import com.example.[namespace/].utils.GPSTracker;

//[/protected]

public class [aClass.name.toUpperFirst()/]Activity extends AppCompatActivity {
    private SensorManager mSensorManager;

	[for (p : Property | persistentEntityProperties)]
	[let hardwareDeviceType : String = p.getValueOfStereotypePropertyEnumLit('Mobile Profile::HardwareDeviceProperty', 'hardwareDeviceType')]
	[if (hardwareDeviceType = 'Microphone')]
	private Button btn[p.name.toUpperFirst()/];
	[elseif (hardwareDeviceType = 'Accelerometer')]
	private Sensor m[p.name.toUpperFirst()/]Accelerometer;
    private TextView tvData[p.name.toUpperFirst()/]Accelerometer;
    private TextView tvTest[p.name.toUpperFirst()/]Accelerometer;
	[elseif (hardwareDeviceType = 'Ambient_Light')]
	private Sensor m[p.name.toUpperFirst()/]Light;
    private TextView tvData[p.name.toUpperFirst()/]Light;
    private TextView tvTest[p.name.toUpperFirst()/]Light;
	[elseif (hardwareDeviceType = 'Gyroscope')]
	private Sensor m[p.name.toUpperFirst()/]Gyroscope;
    private TextView tvData[p.name.toUpperFirst()/]Gyroscope;
    private TextView tvTest[p.name.toUpperFirst()/]Gyroscope;
	[elseif (hardwareDeviceType = 'Compass')]
	private Sensor m[p.name.toUpperFirst()/]MagneticField;
    private TextView tvData[p.name.toUpperFirst()/]MagneticField;
    private TextView tvTest[p.name.toUpperFirst()/]MagneticField;
	[elseif (hardwareDeviceType = 'Camera')]
	private Button btn[p.name.toUpperFirst()/];
	[elseif (hardwareDeviceType = 'GPS')]
    private Location location;
    private TextView tvData[p.name.toUpperFirst()/]GPS;
    private Button btn[p.name.toUpperFirst()/];
	[/if]
	[/let]	
	[/for]

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_[aClass.name.toLower()/]);

		// Setting the toolbar title
		ActionBar actionBar = getSupportActionBar();
        if(actionBar != null) {
            actionBar.setTitle("[aClass.name.toUpperFirst()/]");
            actionBar.setDisplayHomeAsUpEnabled(true);
        }

        // Get an instance of the sensor service, and use that to get an instance of a particular sensor.
        mSensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);

	[for (p : Property | persistentEntityProperties)]
	[let hardwareDeviceType : String = p.getValueOfStereotypePropertyEnumLit('Mobile Profile::HardwareDeviceProperty', 'hardwareDeviceType')]
		[if (hardwareDeviceType = 'Microphone')]
		//Microphone
        btn[p.name.toUpperFirst()/] = (Button) findViewById(R.id.btn[p.name.toUpperFirst()/]);
        btn[p.name.toUpperFirst()/].setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                startActivity(new Intent([aClass.name.toUpperFirst()/]Activity.this, AudioRecordActivity.class));
            }
        });

		[elseif (hardwareDeviceType = 'Accelerometer')]
		//Accelerometer
        tvData[p.name.toUpperFirst()/]Accelerometer = (TextView) findViewById(R.id.tvData[p.name.toUpperFirst()/]Accelerometer);
        tvTest[p.name.toUpperFirst()/]Accelerometer = (TextView) findViewById(R.id.tvTest[p.name.toUpperFirst()/]Accelerometer);
        m[p.name.toUpperFirst()/]Accelerometer = mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
        if (m[p.name.toUpperFirst()/]Accelerometer != null) {
            //Success! There's a ACCELEROMETER sensor.
            tvTest[p.name.toUpperFirst()/]Accelerometer.setText("Success! There's a accelerometer sensor, and it is ready to use");
        } else {
            //Failure! No ACCELEROMETER sensor.
            tvTest[p.name.toUpperFirst()/]Accelerometer.setText("Failure! No accelerometer sensor.");
        }

		[elseif (hardwareDeviceType = 'Ambient_Light')]
		//Ambient_Light
        tvData[p.name.toUpperFirst()/]Light = (TextView) findViewById(R.id.tvData[p.name.toUpperFirst()/]Light);
        tvTest[p.name.toUpperFirst()/]Light = (TextView) findViewById(R.id.tvTest[p.name.toUpperFirst()/]Light);
        m[p.name.toUpperFirst()/]Light = mSensorManager.getDefaultSensor(Sensor.TYPE_LIGHT);
        if (m[p.name.toUpperFirst()/]Light != null) {
            //Success! There's a LIGHT sensor.
            tvTest[p.name.toUpperFirst()/]Light.setText("Success! There's a light sensor, and it is ready to use");
        } else {
            //Failure! No LIGHT sensor.
            tvTest[p.name.toUpperFirst()/]Light.setText("Failure! No light sensor.");
        }

		[elseif (hardwareDeviceType = 'Gyroscope')]
		//Gyroscope
        tvData[p.name.toUpperFirst()/]Gyroscope = (TextView) findViewById(R.id.tvData[p.name.toUpperFirst()/]Gyroscope);
        tvTest[p.name.toUpperFirst()/]Gyroscope = (TextView) findViewById(R.id.tvTest[p.name.toUpperFirst()/]Gyroscope);
        m[p.name.toUpperFirst()/]Gyroscope = mSensorManager.getDefaultSensor(Sensor.TYPE_GYROSCOPE);
        if (m[p.name.toUpperFirst()/]Gyroscope != null) {
            //Success! There's a GYROSCOPE sensor.
            tvTest[p.name.toUpperFirst()/]Gyroscope.setText("Success! There's a gyroscope sensor, and it is ready to use");
        } else {
            //Failure! No GYROSCOPE sensor.
            tvTest[p.name.toUpperFirst()/]Gyroscope.setText("Failure! No gyroscope sensor.");
        }

		[elseif (hardwareDeviceType = 'Compass')]
		//Compass
        tvData[p.name.toUpperFirst()/]MagneticField = (TextView) findViewById(R.id.tvData[p.name.toUpperFirst()/]MagneticField);
        tvTest[p.name.toUpperFirst()/]MagneticField = (TextView) findViewById(R.id.tvTest[p.name.toUpperFirst()/]MagneticField);
        m[p.name.toUpperFirst()/]MagneticField = mSensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);
        if (m[p.name.toUpperFirst()/]MagneticField != null) {
            //Success! There's a MAGNETIC_FIELD sensor.
            tvTest[p.name.toUpperFirst()/]MagneticField.setText("Success! There's a magneticField sensor, and it is ready to use");
        } else {
            //Failure! No MAGNETIC_FIELD sensor.
            tvTest[p.name.toUpperFirst()/]MagneticField.setText("Failure! No magneticField sensor.");
        }

		[elseif (hardwareDeviceType = 'Camera')]
		//Camera
        btn[p.name.toUpperFirst()/] = (Button) findViewById(R.id.btn[p.name.toUpperFirst()/]);
        btn[p.name.toUpperFirst()/].setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                startActivity(new Intent([aClass.name.toUpperFirst()/]Activity.this, CameraActivity.class));
            }
        });

		[elseif (hardwareDeviceType = 'GPS')]
        //GPS
        btn[p.name.toUpperFirst()/] = (Button) findViewById(R.id.btn[p.name.toUpperFirst()/]);
        tvData[p.name.toUpperFirst()/]GPS = (TextView) findViewById(R.id.tvData[p.name.toUpperFirst()/]GPS);
        btn[p.name.toUpperFirst()/].setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                String locationText = "Latitude:" + String.valueOf(location.getLatitude()) + " Longitude:" + String.valueOf(location.getLongitude());
                tvData[p.name.toUpperFirst()/]GPS.setText(locationText);
            }
        });

        getLocation();

		[/if]	
	[/let]	
	[/for]
	}

    @Override
    protected void onResume() {
        super.onResume();

        // Register a listener for the sensor.
	[for (p : Property | persistentEntityProperties)]
	[let hardwareDeviceType : String = p.getValueOfStereotypePropertyEnumLit('Mobile Profile::HardwareDeviceProperty', 'hardwareDeviceType')]
		[if (hardwareDeviceType = 'Accelerometer')]
		mSensorManager.registerListener(m[p.name.toUpperFirst()/]AccelerometerListener, m[p.name.toUpperFirst()/]Accelerometer, SensorManager.SENSOR_DELAY_NORMAL);
		[elseif (hardwareDeviceType = 'Ambient_Light')]
		mSensorManager.registerListener(m[p.name.toUpperFirst()/]LightSensorListener, m[p.name.toUpperFirst()/]Light, SensorManager.SENSOR_DELAY_NORMAL);
		[elseif (hardwareDeviceType = 'Gyroscope')]
		mSensorManager.registerListener(m[p.name.toUpperFirst()/]GyroscopeListener, m[p.name.toUpperFirst()/]Gyroscope, SensorManager.SENSOR_DELAY_NORMAL);
		[elseif (hardwareDeviceType = 'Compass')]
		mSensorManager.registerListener(m[p.name.toUpperFirst()/]MagneticFieldSensorListener, m[p.name.toUpperFirst()/]MagneticField, SensorManager.SENSOR_DELAY_NORMAL);
		[/if]
	[/let]	
	[/for]
        
    }

    @Override
    protected void onPause() {
        super.onPause();

        // Be sure to unregister the sensor when the activity pauses.
	[for (p : Property | persistentEntityProperties)]
	[let hardwareDeviceType : String = p.getValueOfStereotypePropertyEnumLit('Mobile Profile::HardwareDeviceProperty', 'hardwareDeviceType')]
		[if (hardwareDeviceType = 'Accelerometer')]
		mSensorManager.unregisterListener(m[p.name.toUpperFirst()/]AccelerometerListener);
		[elseif (hardwareDeviceType = 'Ambient_Light')]
		mSensorManager.unregisterListener(m[p.name.toUpperFirst()/]LightSensorListener);
		[elseif (hardwareDeviceType = 'Gyroscope')]
		mSensorManager.unregisterListener(m[p.name.toUpperFirst()/]GyroscopeListener);
		[elseif (hardwareDeviceType = 'Compass')]
		mSensorManager.unregisterListener(m[p.name.toUpperFirst()/]MagneticFieldSensorListener);
		[/if]
	[/let]	
	[/for]

    }

	[for (p : Property | persistentEntityProperties)]
	[let hardwareDeviceType : String = p.getValueOfStereotypePropertyEnumLit('Mobile Profile::HardwareDeviceProperty', 'hardwareDeviceType')]
		[if (hardwareDeviceType = 'Accelerometer')]
		private SensorEventListener m[p.name.toUpperFirst()/]AccelerometerListener = new SensorEventListener() {
	        @Override
	        public void onSensorChanged(SensorEvent event) {
	            // Do something with this sensor data.
	            String text = "values['['/]0[']'/] :" + event.values['['/]0[']'/] + "\nvalues['['/]1[']'/] :" + event.values['['/]1[']'/] + "\nvalues['['/]2[']'/] :" + event.values['['/]2[']'/];
	            tvData[p.name.toUpperFirst()/]Accelerometer.setText(text);
	
	        }
	
	        @Override
	        public void onAccuracyChanged(Sensor sensor, int accuracy) {
	            // Do something here if sensor accuracy changes.
	            String text = tvTest[p.name.toUpperFirst()/]Accelerometer.getText().toString();
	            text += "\n" + "Accuracy: " + sensor.toString() + " - " + accuracy;
	            tvTest[p.name.toUpperFirst()/]Accelerometer.setText(text);
	        }
    	};
		[elseif (hardwareDeviceType = 'Ambient_Light')]
			private SensorEventListener m[p.name.toUpperFirst()/]LightSensorListener = new SensorEventListener() {
			        @Override
			        public void onSensorChanged(SensorEvent event) {
			            // Do something with this sensor data.
				        String text = "values['['/]0[']'/] :" + event.values['['/]0[']'/] + "\nvalues['['/]1[']'/] :" + event.values['['/]1[']'/] + "\nvalues['['/]2[']'/] :" + event.values['['/]2[']'/];
			            tvData[p.name.toUpperFirst()/]Light.setText(text);
			        }
			
			        @Override
			        public void onAccuracyChanged(Sensor sensor, int accuracy) {
			            // Do something here if sensor accuracy changes.
			            String text = tvTest[p.name.toUpperFirst()/]Light.getText().toString();
			            text += "\n" + "Accuracy: " + sensor.toString() + " - " + accuracy;
			            tvTest[p.name.toUpperFirst()/]Light.setText(text);
			        }
			    };
		[elseif (hardwareDeviceType = 'Gyroscope')]
			private SensorEventListener m[p.name.toUpperFirst()/]GyroscopeListener = new SensorEventListener() {
		        @Override
		        public void onSensorChanged(SensorEvent event) {
		            // Do something with this sensor data.
		            String text = "values['['/]0[']'/] :" + event.values['['/]0[']'/] + "\nvalues['['/]1[']'/] :" + event.values['['/]1[']'/] + "\nvalues['['/]2[']'/] :" + event.values['['/]2[']'/];
		            tvData[p.name.toUpperFirst()/]Gyroscope.setText(text);
		
		        }
		
		        @Override
		        public void onAccuracyChanged(Sensor sensor, int accuracy) {
		            // Do something here if sensor accuracy changes.
		            String text = tvTest[p.name.toUpperFirst()/]Gyroscope.getText().toString();
		            text += "\n" + "Accuracy: " + sensor.toString() + " - " + accuracy;
		            tvTest[p.name.toUpperFirst()/]Gyroscope.setText(text);
		        }
	    	};
		[elseif (hardwareDeviceType = 'Compass')]
			private SensorEventListener m[p.name.toUpperFirst()/]MagneticFieldSensorListener = new SensorEventListener() {
		        @Override
		        public void onSensorChanged(SensorEvent event) {
		            // Do something with this sensor data.
			         String text = "values['['/]0[']'/] :" + event.values['['/]0[']'/] + "\nvalues['['/]1[']'/] :" + event.values['['/]1[']'/] + "\nvalues['['/]2[']'/] :" + event.values['['/]2[']'/];
		            tvData[p.name.toUpperFirst()/]MagneticField.setText(text);
		        }
		
		        @Override
		        public void onAccuracyChanged(Sensor sensor, int accuracy) {
		            // Do something here if sensor accuracy changes.
		            String text = tvTest[p.name.toUpperFirst()/]MagneticField.getText().toString();
		            text += "\n" + "Accuracy: " + sensor.toString() + " - " + accuracy;
		            tvTest[p.name.toUpperFirst()/]MagneticField.setText(text);
		        }
	    	};
		[/if]
	[/let]
	[/for]

    /*
	*	Getting our current location
	*/
	public void getLocation() {
        GPSTracker gps = new GPSTracker([aClass.name.toUpperFirst()/]Activity.this);
        if (gps.canGetLocation()) {
            location = gps.getLocation();

        } else {
            // can't get location
            // GPS or Network is not enabled
            Toast.makeText([aClass.name.toUpperFirst()/]Activity.this, "Turn on your GPS", Toast.LENGTH_SHORT).show();
        }
	}

  	@Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            // Respond to the action bar's Up/Home button
            case android.R.id.home:
                finish();
                return true;
        }
        return super.onOptionsItemSelected(item);

    }
}

[/file]
[/let]
[/template]

[template public generateSensorActivitiesLayout(aClass : Class)]
[let persistentEntityProperties : Set(Property) = (aClass.getAllAttributes()->select(getAppliedStereotypes()->exists(s: Stereotype |s.name='HardwareDeviceProperty'))) ]			

[file (aClass.classFileNameInvert('android/app/src/main/res/layout/', aClass, 'activity_','.xml'), false)]
<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical">

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical">

[for (p : Property | persistentEntityProperties)]
[let hardwareDeviceType : String = p.getValueOfStereotypePropertyEnumLit('Mobile Profile::HardwareDeviceProperty', 'hardwareDeviceType')]
	[if (hardwareDeviceType = 'Microphone')]
       <Button
        android:id="@+id/btn[p.name.toUpperFirst()/]"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="[p.name.toUpperFirst()/]" />
	[elseif (hardwareDeviceType = 'Accelerometer')]
		<LinearLayout
	            android:layout_width="match_parent"
	            android:layout_height="wrap_content"
	            android:layout_marginTop="10dp"
	            android:gravity="center_vertical"
	            android:orientation="horizontal">
	
	            <TextView
	                android:id="@+id/tvAccelerometer"
	                android:layout_width="wrap_content"
	                android:layout_height="wrap_content"
	                android:text="Accelerometer"
	                android:layout_marginRight="10dp"
	                android:textColor="@android:color/black"
	                android:textStyle="bold"
	                android:enabled="false"
	                android:textAllCaps="false" />
	
	            <LinearLayout
	                android:layout_width="match_parent"
	                android:layout_height="wrap_content"
	                android:orientation="vertical">
	
	                <TextView
	                    android:id="@+id/tvTest[p.name.toUpperFirst()/]Accelerometer"
	                    android:layout_width="match_parent"
	                    android:layout_height="wrap_content"
	                    android:hint="Test:" />
	
	                <TextView
	                    android:id="@+id/tvData[p.name.toUpperFirst()/]Accelerometer"
	                    android:layout_width="match_parent"
	                    android:layout_height="wrap_content"
	                    android:hint="Results:" />
	            </LinearLayout>
        </LinearLayout>
	[elseif (hardwareDeviceType = 'Ambient_Light')]
	<LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="10dp"
            android:gravity="center_vertical"
            android:orientation="horizontal">

            <TextView
                android:id="@+id/tvLight"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="Light"
                android:textColor="@android:color/black"
                android:textStyle="bold"
                android:enabled="false"
                android:layout_marginRight="10dp"
                android:textAllCaps="false" />

            <LinearLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="vertical">

                <TextView
                    android:id="@+id/tvTest[p.name.toUpperFirst()/]Light"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:hint="Test:" />

                <TextView
                    android:id="@+id/tvData[p.name.toUpperFirst()/]Light"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:hint="Results:" />
            </LinearLayout>
        </LinearLayout>
	[elseif (hardwareDeviceType = 'Gyroscope')]
	<LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="10dp"
            android:gravity="center_vertical"
            android:orientation="horizontal">

            <TextView
                android:id="@+id/tvGyroscope"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="Gyroscope"
                android:enabled="false"
                android:textColor="@android:color/black"
                android:textStyle="bold"
                android:layout_marginRight="10dp"
                android:textAllCaps="false" />

            <LinearLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="vertical">

                <TextView
                    android:id="@+id/tvTest[p.name.toUpperFirst()/]Gyroscope"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:hint="Test:" />

                <TextView
                    android:id="@+id/tvData[p.name.toUpperFirst()/]Gyroscope"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:hint="Results:" />
            </LinearLayout>
        </LinearLayout>

	[elseif (hardwareDeviceType = 'Compass')]
	<LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="10dp"
            android:gravity="center_vertical"
            android:orientation="horizontal">

            <TextView
                android:id="@+id/tvMagneticField"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="MagneticField"
                android:layout_marginRight="10dp"
                android:textColor="@android:color/black"
                android:textStyle="bold"
                android:textAllCaps="false" />

            <LinearLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="vertical">

                <TextView
                    android:id="@+id/tvTest[p.name.toUpperFirst()/]MagneticField"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:hint="Test:" />

                <TextView
                    android:id="@+id/tvData[p.name.toUpperFirst()/]MagneticField"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:hint="Results:" />
            </LinearLayout>
        </LinearLayout>
	[elseif (hardwareDeviceType = 'Camera')]
	       <Button
            android:id="@+id/btn[p.name.toUpperFirst()/]"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="[p.name.toUpperFirst()/]" />
	[elseif (hardwareDeviceType = 'GPS')]
    <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="10dp"
            android:gravity="center_vertical"
            android:orientation="horizontal">

            <Button
                android:id="@+id/btn[p.name.toUpperFirst()/]"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="GPS"
                android:textAllCaps="false" />

            <LinearLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="vertical">

                <TextView
                    android:id="@+id/tvTest[p.name.toUpperFirst()/]GPS"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:hint="Test:" />

                <TextView
                    android:id="@+id/tvData[p.name.toUpperFirst()/]GPS"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:hint="Results:" />
            </LinearLayout>
        </LinearLayout>
	[/if]
[/let]
[/for]
    </LinearLayout>
</ScrollView>
[/file]
[/let]
[/template]


[template public generateGPSClass(aClass : Class, namespace : String)]
[file ('android/app/src/main/java/com/example/'+namespace+'/utils/GPSTracker.java', false)]

package com.example.[namespace/].utils;


//[protected ('imports')]
import android.Manifest;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.support.v4.app.ActivityCompat;
import android.os.Build;
import android.os.Bundle;
import android.os.IBinder;
import android.util.Log;
//[/protected]

public class GPSTracker extends Service implements LocationListener {

    private final Context mContext;

    // flag for GPS status
    boolean isGPSEnabled = false;

    // flag for network status
    boolean isNetworkEnabled = false;

    // flag for GPS status
    boolean canGetLocation = false;

    Location location; // location
    double latitude; // latitude
    double longitude; // longitude

    // The minimum distance to change Updates in meters
    private static final long MIN_DISTANCE_CHANGE_FOR_UPDATES = 10; // 10 meters

    // The minimum time between updates in milliseconds
    private static final long MIN_TIME_BW_UPDATES = 1000 * 10 * 1; // 1 minute

    // Declaring a Location Manager
    protected LocationManager locationManager;

    public GPSTracker(Context context) {
        this.mContext = context;
        this.location = getLocation();
    }

    public Location getLocation() {
        try {
            locationManager = (LocationManager) mContext
                    .getSystemService(LOCATION_SERVICE);

            // getting GPS status
            isGPSEnabled = locationManager
                    .isProviderEnabled(LocationManager.GPS_PROVIDER);

            // getting network status
            isNetworkEnabled = locationManager
                    .isProviderEnabled(LocationManager.NETWORK_PROVIDER);

            if (!isGPSEnabled && !isNetworkEnabled) {
                // no network provider is enabled
            } else {
                this.canGetLocation = true;
                // First get location from Network Provider
                if (isNetworkEnabled) {
                    locationManager.requestLocationUpdates(
                            LocationManager.NETWORK_PROVIDER,
                            MIN_TIME_BW_UPDATES,
                            MIN_DISTANCE_CHANGE_FOR_UPDATES, this);
                    Log.d("Network", "Network");
                    if (locationManager != null) {
                        location = locationManager
                                .getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
                        if (location != null) {
                            latitude = location.getLatitude();
                            longitude = location.getLongitude();
                        }
                    }
                }
                // if GPS Enabled get lat/long using GPS Services
                if (isGPSEnabled) {
                    if (location == null) {
                        locationManager.requestLocationUpdates(
                                LocationManager.GPS_PROVIDER,
                                MIN_TIME_BW_UPDATES,
                                MIN_DISTANCE_CHANGE_FOR_UPDATES, this);
                        Log.d("GPS Enabled", "GPS Enabled");
                        if (locationManager != null) {
                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                                if (checkSelfPermission(Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && checkSelfPermission(Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
                                    // TODO: Consider calling
                                    //    public void requestPermissions(@NonNull String['['/][']'/] permissions, int requestCode)
                                    // here to request the missing permissions, and then overriding
                                    //   public void onRequestPermissionsResult(int requestCode, String['['/][']'/] permissions,
                                    //                                          int['['/][']'/] grantResults)
                                    // to handle the case where the user grants the permission. See the documentation
                                    // for Activity#requestPermissions for more details.
                                    return null;
                                }
                            }
                            location = locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);
                            if (location != null) {
                                latitude = location.getLatitude();
                                longitude = location.getLongitude();
                            }
                        }
                    }
                }

                stopUsingGPS();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        return location;
    }

       /**
     * Stop using GPS listener
     * Calling this function will stop using GPS in your app
     * */
    public void stopUsingGPS() {
        if (locationManager != null) {
            if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
                // TODO: Consider calling
                //    ActivityCompat#requestPermissions
                // here to request the missing permissions, and then overriding
                //   public void onRequestPermissionsResult(int requestCode, String['['/][']'/] permissions,
                //                                          int['['/][']'/] grantResults)
                // to handle the case where the user grants the permission. See the documentation
                // for ActivityCompat#requestPermissions for more details.
                return;
            }
            locationManager.removeUpdates(GPSTracker.this);
        }
    }

    /**
     * Function to get latitude
     * */
    public double getLatitude(){
        if(location != null){
            latitude = location.getLatitude();
        }

        // return latitude
        return latitude;
    }

    /**
     * Function to get longitude
     * */
    public double getLongitude(){
        if(location != null){
            longitude = location.getLongitude();
        }

        // return longitude
        return longitude;
    }


    /**
     * Function to check GPS/wifi enabled
     * @return boolean
     * */
    public boolean canGetLocation() {
        return this.canGetLocation;
    }

    @Override
    public void onLocationChanged(Location location) {
    }

    @Override
    public void onProviderDisabled(String provider) {
    }

    @Override
    public void onProviderEnabled(String provider) {
    }

    @Override
    public void onStatusChanged(String provider, int status, Bundle extras) {
    }

    @Override
    public IBinder onBind(Intent arg0) {
        return null;
    }

}
[/file]
[/template]

[template public generateAudioActivity(aClass : Class, namespace : String)]
[file ('android/app/src/main/java/com/example/'+namespace+'/activities/AudioRecordActivity.java', false)]

package com.example.[namespace/].activities;


//[protected ('imports')]
import android.media.MediaPlayer;
import android.media.MediaRecorder;
import android.os.Environment;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.app.ActionBar;
import android.view.MenuItem;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import com.example.[namespace/].R;


import java.text.SimpleDateFormat;
import java.util.Date;
import java.io.IOException;
//[/protected]

public class AudioRecordActivity extends AppCompatActivity {

    private MediaRecorder myRecorder;
    private MediaPlayer myPlayer;
    private String outputFile = null;
    private Button startBtn;
    private Button stopBtn;
    private Button playBtn;
    private Button stopPlayBtn;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_audio_record);

		ActionBar actionBar = getSupportActionBar();
        if (actionBar != null) {
            actionBar.setTitle("AudioRecord");
            actionBar.setDisplayHomeAsUpEnabled(true);
        }

		initialize();
    }

	private void initialize() {
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyymmddhhmmss");
        String date = dateFormat.format(new Date());
        String audioRecordFile = "AudioRecord_" + date + ".3gpp";

        // store it to sd card
        outputFile = Environment.getExternalStorageDirectory().
                getAbsolutePath() + "/" + audioRecordFile;

        myRecorder = new MediaRecorder();
        myRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
        myRecorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);
        myRecorder.setAudioEncoder(MediaRecorder.OutputFormat.AMR_NB);
        myRecorder.setOutputFile(outputFile);

        startBtn = (Button) findViewById(R.id.start);
        startBtn.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                // TODO Auto-generated method stub
                start(v);
            }
        });

        stopBtn = (Button) findViewById(R.id.stop);
        stopBtn.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                // TODO Auto-generated method stub
                stop(v);
            }
        });

        playBtn = (Button) findViewById(R.id.play);
        playBtn.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                // TODO Auto-generated method stub
                play(v);
            }
        });

        stopPlayBtn = (Button) findViewById(R.id.stopPlay);
        stopPlayBtn.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                // TODO Auto-generated method stub
                stopPlay(v);
            }
        });
    }

	/*
	* Start recording
	*/
    public void start(View view){
        try {
            myRecorder.prepare();
            myRecorder.start();
        } catch (IllegalStateException e) {
            // start:it is called before prepare()
            // prepare: it is called after start() or before setOutputFormat()
            e.printStackTrace();
        } catch (IOException e) {
            // prepare() fails
            e.printStackTrace();
        }

        startBtn.setEnabled(false);
        stopBtn.setEnabled(true);

        Toast.makeText(getApplicationContext(), "Start recording...",
                Toast.LENGTH_SHORT).show();
    }

	/*
	* Stop recording
	*/
    public void stop(View view){
        try {
            myRecorder.stop();
            myRecorder.release();
            myRecorder  = null;

            stopBtn.setEnabled(false);
            playBtn.setEnabled(true);

            Toast.makeText(getApplicationContext(), "Stop recording...",
                    Toast.LENGTH_SHORT).show();
        } catch (IllegalStateException e) {
            //  it is called before start()
            e.printStackTrace();
        } catch (RuntimeException e) {
            // no valid audio/video data has been received
            e.printStackTrace();
        }
    }

	/*
	* Play captured record
	*/
    public void play(View view) {
        try{
            myPlayer = new MediaPlayer();
            myPlayer.setDataSource(outputFile);
            myPlayer.prepare();
            myPlayer.start();

            playBtn.setEnabled(false);
            stopPlayBtn.setEnabled(true);

            Toast.makeText(getApplicationContext(), "Start play the recording...",
                    Toast.LENGTH_SHORT).show();
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

	/*
	* Stop captured record
	*/
    public void stopPlay(View view) {
        try {
            if (myPlayer != null) {
                myPlayer.stop();
                myPlayer.release();
                myPlayer = null;
                playBtn.setEnabled(true);
                stopPlayBtn.setEnabled(false);

                Toast.makeText(getApplicationContext(), "Stop playing the recording...",
                        Toast.LENGTH_SHORT).show();
            }
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

 	@Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            // Respond to the action bar's Up/Home button
            case android.R.id.home:
                finish();
                return true;
        }
        return super.onOptionsItemSelected(item);

    }
}

[/file]
[/template]

[template public generateAudioActivityLayout(aClass : Class)]
[file ('android/app/src/main/res/layout/activity_audio_record.xml', false)]
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">
    <ImageView
        android:id="@+id/micImage"
        android:layout_width="60dp"
        android:layout_height="60dp"
        android:layout_centerHorizontal="true"
        android:layout_marginTop="20dp"
        android:src="@android:drawable/presence_audio_online" />

    <LinearLayout
        android:id="@+id/linear1"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_below="@+id/micImage"
        android:layout_marginTop="10dp"
        android:gravity="center"
        android:orientation="vertical">

        <Button
            android:id="@+id/start"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Capture Audio"
            android:textAllCaps="false" />

        <Button
            android:id="@+id/stop"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="10dp"
            android:enabled="false"
            android:text="Stop Capture"
            android:textAllCaps="false" />

        <Button
            android:id="@+id/play"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="10dp"
            android:enabled="false"
            android:text="Play Capture"
            android:textAllCaps="false" />

        <Button
            android:id="@+id/stopPlay"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="10dp"
            android:enabled="false"
            android:text="Stop Playing"
            android:textAllCaps="false" />
    </LinearLayout>
</RelativeLayout>
[/file]
[/template]



[template public generateCameraActivity(aClass : Class, namespace : String)]
[file ('android/app/src/main/java/com/example/'+namespace+'/activities/CameraActivity.java', false)]

package com.example.[namespace/].activities;

//[protected ('imports')]
import android.content.Context;
import android.content.pm.PackageManager;
import android.hardware.Camera;
import android.os.Bundle;
import android.os.Environment;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.app.ActionBar;
import android.view.MenuItem;
import android.util.Log;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.Toast;

import com.example.[namespace/].R;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
//[/protected]

public class CameraActivity extends AppCompatActivity {
    private Camera mCamera;
    private CameraPreview mPreview;
    private Camera.PictureCallback mPicture;
    private Button capture, switchCamera;
    private Context myContext;
    private LinearLayout cameraPreview;
    private boolean cameraFront = false;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_camera);

		// Setting the toolbar title
		ActionBar actionBar = getSupportActionBar();
        if (actionBar != null) {
            actionBar.setTitle("AudioRecord");
            actionBar.setDisplayHomeAsUpEnabled(true);
        }

        myContext = this;

        initialize();

    }

	/*
	* Initializing the preview Camera
	*/
    public void initialize() {
        cameraPreview = (LinearLayout) findViewById(R.id.camera_preview);
        mPreview = new CameraPreview(myContext, mCamera);
        cameraPreview.addView(mPreview);

        capture = (Button) findViewById(R.id.button_capture);
        capture.setOnClickListener(captrureListener);

        switchCamera = (Button) findViewById(R.id.button_ChangeCamera);
        switchCamera.setOnClickListener(switchCameraListener);
    }

	/*
	* Search for the front facing camera
	*/
    private int findFrontFacingCamera() {
        int cameraId = -1;
        // Search for the front facing camera
        int numberOfCameras = Camera.getNumberOfCameras();
        for (int i = 0; i < numberOfCameras; i++) {
            Camera.CameraInfo info = new Camera.CameraInfo();
            Camera.getCameraInfo(i, info);
            if (info.facing == Camera.CameraInfo.CAMERA_FACING_FRONT) {
                cameraId = i;
                cameraFront = true;
                break;
            }
        }
        return cameraId;
    }

	/*
	* Search for the back facing camera
	*/
    private int findBackFacingCamera() {
        int cameraId = -1;
        //Search for the back facing camera
        //get the number of cameras
        int numberOfCameras = Camera.getNumberOfCameras();
        //for every camera check
        for (int i = 0; i < numberOfCameras; i++) {
            Camera.CameraInfo info = new Camera.CameraInfo();
            Camera.getCameraInfo(i, info);
            if (info.facing == Camera.CameraInfo.CAMERA_FACING_BACK) {
                cameraId = i;
                cameraFront = false;
                break;
            }
        }
        return cameraId;
    }

    public void onResume() {
        super.onResume();
        if (!hasCamera(myContext)) {
            Toast toast = Toast.makeText(myContext, "Sorry, your phone does not have a camera!", Toast.LENGTH_LONG);
            toast.show();
            finish();
        }
        if (mCamera == null) {
            //if the front facing camera does not exist
            if (findFrontFacingCamera() < 0) {
                Toast.makeText(this, "No front facing camera found.", Toast.LENGTH_LONG).show();
                switchCamera.setVisibility(View.GONE);
            }
            mCamera = Camera.open(findBackFacingCamera());
            mPicture = getPictureCallback();
            mPreview.refreshCamera(mCamera);
        }
    }


	/*
	* Switch camera, from the front and the back and vice versa
	*/
    View.OnClickListener switchCameraListener = new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            //get the number of cameras
            int camerasNumber = Camera.getNumberOfCameras();
            if (camerasNumber > 1) {
                //release the old camera instance
                //switch camera, from the front and the back and vice versa

                releaseCamera();
                chooseCamera();
            } else {
                Toast toast = Toast.makeText(myContext, "Sorry, your phone has only one camera!", Toast.LENGTH_LONG);
                toast.show();
            }
        }
    };

	/*
	* Choose camera, front or back
	*/
    public void chooseCamera() {
        //if the camera preview is the front
        if (cameraFront) {
            int cameraId = findBackFacingCamera();
            if (cameraId >= 0) {
                //open the backFacingCamera
                //set a picture callback
                //refresh the preview

                mCamera = Camera.open(cameraId);
                mPicture = getPictureCallback();
                mPreview.refreshCamera(mCamera);
            }
        } else {
            int cameraId = findFrontFacingCamera();
            if (cameraId >= 0) {
                //open the backFacingCamera
                //set a picture callback
                //refresh the preview

                mCamera = Camera.open(cameraId);
                mPicture = getPictureCallback();
                mPreview.refreshCamera(mCamera);
            }
        }
    }

    @Override
    protected void onPause() {
        super.onPause();
        //when on Pause, release camera in order to be used from other applications
        releaseCamera();
    }

	@Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            // Respond to the action bar's Up/Home button
            case android.R.id.home:
                finish();
                return true;
        }
        return super.onOptionsItemSelected(item);

    }
 
	/*
	* Checking if the device has camera
	*/
    private boolean hasCamera(Context context) {
        //check if the device has camera
        if (context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA)) {
            return true;
        } else {
            return false;
        }
    }

    private Camera.PictureCallback getPictureCallback() {
        Camera.PictureCallback picture = new Camera.PictureCallback() {

            @Override
            public void onPictureTaken(byte['['/][']'/] data, Camera camera) {
                //make a new picture file
                File pictureFile = getOutputMediaFile();

                if (pictureFile == null) {
                    return;
                }
                try {
                    //write the file
                    FileOutputStream fos = new FileOutputStream(pictureFile);
                    fos.write(data);
                    fos.close();
                    Toast toast = Toast.makeText(myContext, "Picture saved: " + pictureFile.getName(), Toast.LENGTH_LONG);
                    toast.show();

                } catch (FileNotFoundException e) {
                } catch (IOException e) {
                }

                //refresh camera to continue preview
                mPreview.refreshCamera(mCamera);
            }
        };
        return picture;
    }

    View.OnClickListener captrureListener = new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            mCamera.takePicture(null, null, mPicture);
        }
    };

    /*
	* Make picture and save to a folder
	*/
    private static File getOutputMediaFile() {
        //make a new file directory inside the "sdcard" folder
        File mediaStorageDir = new File(Environment.getExternalStorageDirectory(), "CameraDemo");

        //if this "CameraDemo folder does not exist
        if (!mediaStorageDir.exists()) {
            //if you cannot make this folder return
            if (!mediaStorageDir.mkdirs()) {
                return null;
            }
        }

        //take the current timeStamp
        String timeStamp = new SimpleDateFormat("yyyymmddhhmmss").format(new Date());
        File mediaFile;
        //and make a media file:
        mediaFile = new File(mediaStorageDir.getPath() + File.separator + "Picture_" + timeStamp + ".jpg");

        return mediaFile;
    }

    private void releaseCamera() {
        // stop and release camera
        if (mCamera != null) {
            mCamera.release();
            mCamera = null;
        }
    }


    public class CameraPreview extends SurfaceView implements SurfaceHolder.Callback {
        private SurfaceHolder mHolder;
        private Camera mCamera;

        public CameraPreview(Context context, Camera camera) {
            super(context);
            mCamera = camera;
            mHolder = getHolder();
            mHolder.addCallback(this);
            // deprecated setting, but required on Android versions prior to 3.0
            mHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
        }

		/*
		* Create the surface and start camera preview
		*/
        public void surfaceCreated(SurfaceHolder holder) {
            try {
                // create the surface and start camera preview
                if (mCamera == null) {
                    mCamera.setPreviewDisplay(holder);
                    mCamera.startPreview();
                }
            } catch (IOException e) {
                Log.d(VIEW_LOG_TAG, "Error setting camera preview: " + e.getMessage());
            }
        }

		/*
		* start preview with new settings
		*/
        public void refreshCamera(Camera camera) {
            if (mHolder.getSurface() == null) {
                // preview surface does not exist
                return;
            }
            // stop preview before making changes
            try {
                mCamera.stopPreview();
            } catch (Exception e) {
                // ignore: tried to stop a non-existent preview
            }
            // set preview size and make any resize, rotate or
            // reformatting changes here
            // start preview with new settings
            setCamera(camera);
            try {
                mCamera.setPreviewDisplay(mHolder);
                mCamera.startPreview();
            } catch (Exception e) {
                Log.d(VIEW_LOG_TAG, "Error starting camera preview: " + e.getMessage());
            }
        }

        public void surfaceChanged(SurfaceHolder holder, int format, int w, int h) {
            // If your preview can change or rotate, take care of those events here.
            // Make sure to stop the preview before resizing or reformatting it.
            refreshCamera(mCamera);
        }

        public void setCamera(Camera camera) {
            //method to set a camera instance
            mCamera = camera;
        }

        @Override
        public void surfaceDestroyed(SurfaceHolder holder) {
            // TODO Auto-generated method stub
            // mCamera.release();

        }
    }
}
[/file]
[/template]


[template public generateCameraActivityLayout(aClass : Class)]
[file ('android/app/src/main/res/layout/activity_camera.xml', false)]
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent"
    android:orientation="horizontal">

    <LinearLayout
        android:id="@+id/camera_preview"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:layout_above="@+id/buttonsLayout"
        android:orientation="horizontal" />

    <LinearLayout
        android:id="@+id/buttonsLayout"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_alignParentBottom="true"
        android:layout_gravity="center"
        android:gravity="center"
        android:orientation="horizontal"
        android:padding="15dp">

        <Button
            android:id="@+id/button_ChangeCamera"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginRight="10dp"
            android:layout_marginEnd="10dp"
            android:text="Switch Camera" />

        <Button
            android:id="@+id/button_capture"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Capture Photo" />
    </LinearLayout>
</RelativeLayout>
[/file]
[/template]
