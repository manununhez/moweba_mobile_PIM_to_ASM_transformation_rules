[comment encoding = UTF-8 /]
[module generateBDFormActivities('http://www.eclipse.org/uml2/5.0.0/UML')]

[import services::uml2services/]
[import common::utils_gen/]


[template public generateBDFormActivities(aClass : Class, namespace:String)]
[let persistentEntityProperties: Set(Property) = aClass.getAllAttributes()->select(getAppliedStereotypes()->exists(s: Stereotype |s.name='persistentEntityProperty'))]	

[file (aClass.classFileName('android/app/src/main/java/com/example/'+namespace+'/activities/', aClass, 'FormActivity','.java'), false)]

package com.example.[namespace/].activities;

//[protected ('imports')]
import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.support.design.widget.TextInputEditText;
import android.support.v7.app.ActionBar;
import android.support.v7.app.AppCompatActivity;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.Toast;

import com.example.[namespace/].R;
import com.example.[namespace/].bd.dao.[aClass.name.toUpperFirst()/]DAO;
import com.example.[namespace/].beans.[aClass.name.toUpperFirst()/];
import com.example.[namespace/].helpers.SQLiteHelper;

import java.math.BigDecimal;
//[/protected]

public class [aClass.name.toUpperFirst()/]FormActivity extends AppCompatActivity {
    private Boolean booleanEditMode = false; //Determine the type of operation to be performed

	[for (p : Property | persistentEntityProperties)]
	private TextInputEditText tie[p.name.toUpperFirst()/]; 
	[/for]
	private Intent intent;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_form_[aClass.name.toLower()/]);

        intent = getIntent();
        if (intent.getStringExtra("typeOperation").equals("edit")) {
            booleanEditMode = true;
        }

		// Setting the toolbar title
        ActionBar actionBar = getSupportActionBar();
        if (actionBar != null) {
            actionBar.setTitle(booleanEditMode ? "Edit [aClass.name.toUpperFirst()/]" : "Add [aClass.name.toUpperFirst()/]"); //Change the boton label according to the operation
            actionBar.setDisplayHomeAsUpEnabled(true);
        }

		[for (p : Property | persistentEntityProperties)]
		tie[p.name.toUpperFirst()/] =  (TextInputEditText) findViewById(R.id.tie[p.name.toUpperFirst()/]); 
		[/for]

       
        Button btnSave = (Button) findViewById(R.id.btnSave);

        if (booleanEditMode) { //Edit mode
            btnSave.setText("Save Changes");
            load[aClass.name.toUpperFirst()/]Data(); //Populating the form with the provided data
        }

        SQLiteHelper db = new SQLiteHelper(this); //Instantiating the helper
        final [aClass.name.toUpperFirst()/]DAO [aClass.name.toLowerFirst()/]DAO = new [aClass.name.toUpperFirst()/]DAO(db); //Instantiating the DAO functionalities

        btnSave.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
				try {
	               // We use the constructor of the object to verify that the data entered are of the correct type, and then store them               
	               [aClass.name.toUpperFirst()/] [aClass.name.toLowerFirst()/] = get[aClass.name.toUpperFirst()/]FromEditext();
	                if (booleanEditMode) {
	                    [aClass.name.toLowerFirst()/]DAO.update[aClass.name.toUpperFirst()/]([aClass.name.toLowerFirst()/]);
	                }else{
	                    [aClass.name.toLowerFirst()/]DAO.add[aClass.name.toUpperFirst()/]([aClass.name.toLowerFirst()/]);
	                }
	
	                Intent returnIntent = new Intent();
	                setResult(Activity.RESULT_OK, returnIntent);
	                finish();
				}catch (Exception e){
	                  Toast.makeText([aClass.name.toUpperFirst()/]FormActivity.this, e.getMessage(), Toast.LENGTH_SHORT).show();
				}
            }
        });

    }

	/*
	*	Retrieving all the data to show in form
	*/
	private void load[aClass.name.toUpperFirst()/]Data(){
		[aClass.name.toUpperFirst()/] [aClass.name.toLowerFirst()/] = ([aClass.name.toUpperFirst()/]) intent.getSerializableExtra("[aClass.name.toLowerFirst()/]");
        [for (p : Property | persistentEntityProperties)]
		[if(p.getMatchedTypeForJava('Mobile Profile::persistentEntityProperty', 'dataType') <> 'String')]
		tie[p.name.toUpperFirst()/].setText(String.valueOf([aClass.name.toLowerFirst()/].get[p.name.toUpperFirst()/]()));
		[else]
		tie[p.name.toUpperFirst()/].setText([aClass.name.toLowerFirst()/].get[p.name.toUpperFirst()/]());
		[/if] 
		[/for]
	}

	/*
	*	Getting data from each field of the form, and initializing the model with these data
	*/
    private [aClass.name.toUpperFirst()/] get[aClass.name.toUpperFirst()/]FromEditext() {
		[for (p : Property | persistentEntityProperties)]
		[if(p.getMatchedTypeForJava('Mobile Profile::persistentEntityProperty', 'dataType') <> 'String')]
		[p.stringToSpecificTypeAssignment(p.getMatchedTypeForJava('Mobile Profile::persistentEntityProperty', 'dataType'), 'tie'+p.name.toUpperFirst()+'.getText().toString()', p.name.toLowerFirst())/];
		[else]
		String [p.name.toLowerFirst()/] = tie[p.name.toUpperFirst()/].getText().toString();
		[/if]
		[/for]
        
        return new [aClass.name.toUpperFirst()/]([for (p : Property | persistentEntityProperties) separator(', ')][p.name/][/for]);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            // Respond to the action bar's Up/Home button
            case android.R.id.home:
                finish();
                return true;
        }
        return super.onOptionsItemSelected(item);

    }
}

[/file]
[/let]
[/template]

[template public generateBDFormActivitiesLayout(aClass : Class)]
[let persistentEntityProperties: Set(Property) = aClass.getAllAttributes()->select(getAppliedStereotypes()->exists(s: Stereotype |s.name='persistentEntityProperty'))]	

[file (aClass.classFileNameInvert('android/app/src/main/res/layout/', aClass, 'activity_form_','.xml'), false)]
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:paddingBottom="@dimen/activity_vertical_margin"
    android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    android:orientation="vertical">

	[for (p : Property | persistentEntityProperties)separator('\n')]
	<android.support.design.widget.TextInputLayout
        android:id="@+id/til[p.name.toUpperFirst()/]"
        android:layout_width="match_parent"
        android:layout_height="wrap_content">

        <android.support.design.widget.TextInputEditText
            android:id="@+id/tie[p.name.toUpperFirst()/]"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="[p.name.toLowerFirst()/]" />
    </android.support.design.widget.TextInputLayout>
	[/for]

    <Button
        android:id="@+id/btnSave"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
		android:textAllCaps="false"
        android:layout_gravity="center_horizontal"
        android:text="Add"/>
</LinearLayout>
[/file]
[/let]
[/template]

